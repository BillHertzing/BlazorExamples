{
  "ApiDocumentation/netstandard2.0/GUI.Pages.BasicRESTServicesCodeBehind.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Pages.BasicRESTServicesCodeBehind.html",
    "title": "Class BasicRESTServicesCodeBehind | Blazor Examples with ServiceStack",
    "keywords": "Class BasicRESTServicesCodeBehind Inheritance System.Object Microsoft.AspNetCore.Blazor.Components.BlazorComponent BasicRESTServicesCodeBehind BasicRESTServices Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTreeMethodName Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInit() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSet() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSetAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.ShouldRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRenderAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IComponent.Init(Microsoft.AspNetCore.Blazor.Components.RenderHandle) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters(Microsoft.AspNetCore.Blazor.Components.ParameterCollection) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent(Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker, Microsoft.AspNetCore.Blazor.UIEventArgs) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender.OnAfterRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI.Pages Assembly : GUI.dll Syntax public class BasicRESTServicesCodeBehind : BlazorComponent, IComponent, IHandleEvent, IHandleAfterRender Fields dataReceivedFromPost Declaration public string dataReceivedFromPost Field Value Type Description System.String dataToPost Declaration public string dataToPost Field Value Type Description System.String labelForDataReceivedFromPost Declaration public const string labelForDataReceivedFromPost = \"Data Received from last Post\" Field Value Type Description System.String labelForDataToPost Declaration public const string labelForDataToPost = \"Data To Post\" Field Value Type Description System.String labelForPostDataDataButton Declaration public const string labelForPostDataDataButton = \"Press to Post Data\" Field Value Type Description System.String Properties InitializationRspDTO Declaration public InitializationRspDTO InitializationRspDTO { get; set; } Property Value Type Description InitializationRspDTO Logger Declaration [Inject] public ILogger<BasicRESTServicesCodeBehind> Logger { get; set; } Property Value Type Description Microsoft.Extensions.Logging.ILogger < BasicRESTServicesCodeBehind > Methods OnInitAsync() Declaration protected override Task OnInitAsync() Returns Type Description System.Threading.Tasks.Task Overrides Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInitAsync() PostData() Declaration public Task PostData() Returns Type Description System.Threading.Tasks.Task Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender"
  },
  "ApiDocumentation/net471/CommonDTOs.PostDataRspDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.PostDataRspDTO.html",
    "title": "Class PostDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataRspDTO Inheritance System.Object PostDataRspDTO Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataRspDTO Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netstandard2.0/GUI.Program.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Program.html",
    "title": "Class Program | Blazor Examples with ServiceStack",
    "keywords": "Class Program Inheritance System.Object Program Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI Assembly : GUI.dll Syntax public class Program Methods CreateHostBuilder(String[]) Declaration public static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) Parameters Type Name Description System.String [] args Returns Type Description Microsoft.AspNetCore.Blazor.Hosting.IWebAssemblyHostBuilder Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "ApiDocumentation/net471/GUI.Pages.BasicRESTServicesCodeBehind.html": {
    "href": "ApiDocumentation/net471/GUI.Pages.BasicRESTServicesCodeBehind.html",
    "title": "Class BasicRESTServicesCodeBehind | Blazor Examples with ServiceStack",
    "keywords": "Class BasicRESTServicesCodeBehind Inheritance System.Object BasicRESTServicesCodeBehind BasicRESTServices Namespace : GUI.Pages Assembly : GUI.dll Syntax public class BasicRESTServicesCodeBehind : BlazorComponent Fields dataReceivedFromPost Declaration public string dataReceivedFromPost Field Value Type Description System.String dataToPost Declaration public string dataToPost Field Value Type Description System.String labelForDataReceivedFromPost Declaration public const string labelForDataReceivedFromPost = null Field Value Type Description System.String labelForDataToPost Declaration public const string labelForDataToPost = null Field Value Type Description System.String labelForPostDataDataButton Declaration public const string labelForPostDataDataButton = null Field Value Type Description System.String Properties InitializationRspDTO Declaration public InitializationRspDTO InitializationRspDTO { get; set; } Property Value Type Description InitializationRspDTO Logger Declaration public ILogger<BasicRESTServicesCodeBehind> Logger { get; set; } Property Value Type Description ILogger < BasicRESTServicesCodeBehind > Methods OnInitAsync() Declaration protected override Task OnInitAsync() Returns Type Description Task PostData() Declaration public Task PostData() Returns Type Description Task"
  },
  "Api/netcoreapp2.0/GUI.html": {
    "href": "Api/netcoreapp2.0/GUI.html",
    "title": "Namespace GUI | Blazor Examples with ServiceStack",
    "keywords": "Namespace GUI Classes Program Startup"
  },
  "Api/net471/GUI.Pages.html": {
    "href": "Api/net471/GUI.Pages.html",
    "title": "Namespace GUI.Pages | Blazor Examples with ServiceStack",
    "keywords": "Namespace GUI.Pages Classes BasicRESTServicesCodeBehind"
  },
  "ApiDocumentation/netstandard2.0/GUI.Shared.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Shared.html",
    "title": "Namespace GUI.Shared | Blazor Examples with ServiceStack",
    "keywords": "Namespace GUI.Shared Classes MainLayout NavMenu"
  },
  "ApiDocumentation/netcoreapp2.0/GUI.Startup.html": {
    "href": "ApiDocumentation/netcoreapp2.0/GUI.Startup.html",
    "title": "Class Startup | Blazor Examples with ServiceStack",
    "keywords": "Class Startup Inheritance System.Object Startup Namespace : GUI Assembly : GUI.dll Syntax public class Startup : object Methods Configure(IBlazorApplicationBuilder) Declaration public void Configure(IBlazorApplicationBuilder app) Parameters Type Name Description IBlazorApplicationBuilder app ConfigureServices(IServiceCollection) Declaration public void ConfigureServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services"
  },
  "Api/netstandard2.0/ConsoleApp.html": {
    "href": "Api/netstandard2.0/ConsoleApp.html",
    "title": "Namespace ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "Namespace ConsoleApp Classes AppHost BaseServices"
  },
  "Api/netcoreapp2.0/CommonDTOs.html": {
    "href": "Api/netcoreapp2.0/CommonDTOs.html",
    "title": "Namespace CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Namespace CommonDTOs Classes InitializationReqDTO InitializationRspDTO PostDataReqDTO PostDataRspDTO"
  },
  "Api/net471/CommonDTOs.html": {
    "href": "Api/net471/CommonDTOs.html",
    "title": "Namespace CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Namespace CommonDTOs Classes InitializationReqDTO InitializationRspDTO PostDataReqDTO PostDataRspDTO"
  },
  "Api/net471/GUI.html": {
    "href": "Api/net471/GUI.html",
    "title": "Namespace GUI | Blazor Examples with ServiceStack",
    "keywords": "Namespace GUI Classes Program Startup"
  },
  "ApiDocumentation/net471/CommonDTOs.InitializationRspDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.InitializationRspDTO.html",
    "title": "Class InitializationRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationRspDTO Inheritance System.Object InitializationRspDTO Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationRspDTO"
  },
  "ApiDocumentation/net471/GUI.Program.html": {
    "href": "ApiDocumentation/net471/GUI.Program.html",
    "title": "Class Program | Blazor Examples with ServiceStack",
    "keywords": "Class Program Inheritance System.Object Program Namespace : GUI Assembly : GUI.dll Syntax public class Program : object Methods CreateHostBuilder(String[]) Declaration public static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) Parameters Type Name Description System.String [] args Returns Type Description IWebAssemblyHostBuilder Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.PostDataReqDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.PostDataReqDTO.html",
    "title": "Class PostDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataReqDTO Inheritance System.Object PostDataReqDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataReqDTO : IReturn<PostDataRspDTO> Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netstandard2.0/GUI.Pages._ViewImports.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Pages._ViewImports.html",
    "title": "Class _ViewImports | Blazor Examples with ServiceStack",
    "keywords": "Class _ViewImports Inheritance System.Object Microsoft.AspNetCore.Blazor.Components.BlazorComponent _ViewImports Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTreeMethodName Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInit() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInitAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSet() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSetAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.ShouldRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRenderAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IComponent.Init(Microsoft.AspNetCore.Blazor.Components.RenderHandle) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters(Microsoft.AspNetCore.Blazor.Components.ParameterCollection) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent(Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker, Microsoft.AspNetCore.Blazor.UIEventArgs) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender.OnAfterRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI.Pages Assembly : GUI.dll Syntax [Layout(typeof(MainLayout))] public class _ViewImports : BlazorComponent, IComponent, IHandleEvent, IHandleAfterRender Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder Overrides Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder) Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender"
  },
  "ApiDocumentation/netstandard2.0/GUI.Pages.Index.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Pages.Index.html",
    "title": "Class Index | Blazor Examples with ServiceStack",
    "keywords": "Class Index Inheritance System.Object Microsoft.AspNetCore.Blazor.Components.BlazorComponent Index Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTreeMethodName Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInit() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInitAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSet() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSetAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.ShouldRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRenderAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IComponent.Init(Microsoft.AspNetCore.Blazor.Components.RenderHandle) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters(Microsoft.AspNetCore.Blazor.Components.ParameterCollection) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent(Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker, Microsoft.AspNetCore.Blazor.UIEventArgs) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender.OnAfterRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI.Pages Assembly : GUI.dll Syntax [Layout(typeof(MainLayout))] [Route(\"/\")] [Route(\"/index.html\")] public class Index : BlazorComponent, IComponent, IHandleEvent, IHandleAfterRender Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder Overrides Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder) Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.PostDataRspDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.PostDataRspDTO.html",
    "title": "Class PostDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataRspDTO Inheritance System.Object PostDataRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataRspDTO : object Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netstandard2.0/GUI.Shared.NavMenu.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Shared.NavMenu.html",
    "title": "Class NavMenu | Blazor Examples with ServiceStack",
    "keywords": "Class NavMenu Inheritance System.Object Microsoft.AspNetCore.Blazor.Components.BlazorComponent NavMenu Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTreeMethodName Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInit() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInitAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSet() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSetAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.ShouldRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRenderAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IComponent.Init(Microsoft.AspNetCore.Blazor.Components.RenderHandle) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters(Microsoft.AspNetCore.Blazor.Components.ParameterCollection) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent(Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker, Microsoft.AspNetCore.Blazor.UIEventArgs) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender.OnAfterRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI.Shared Assembly : GUI.dll Syntax public class NavMenu : BlazorComponent, IComponent, IHandleEvent, IHandleAfterRender Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder Overrides Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder) Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.InitializationRspDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.InitializationRspDTO.html",
    "title": "Class InitializationRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationRspDTO Inheritance System.Object InitializationRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationRspDTO : object"
  },
  "ApiDocumentation/netstandard2.0/GUI.Pages.BasicRESTServices.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Pages.BasicRESTServices.html",
    "title": "Class BasicRESTServices | Blazor Examples with ServiceStack",
    "keywords": "Class BasicRESTServices Inheritance System.Object Microsoft.AspNetCore.Blazor.Components.BlazorComponent BasicRESTServicesCodeBehind BasicRESTServices Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender Inherited Members BasicRESTServicesCodeBehind.OnInitAsync() BasicRESTServicesCodeBehind.InitializationRspDTO BasicRESTServicesCodeBehind.PostData() BasicRESTServicesCodeBehind.labelForDataToPost BasicRESTServicesCodeBehind.labelForDataReceivedFromPost BasicRESTServicesCodeBehind.labelForPostDataDataButton BasicRESTServicesCodeBehind.Logger BasicRESTServicesCodeBehind.dataToPost BasicRESTServicesCodeBehind.dataReceivedFromPost Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTreeMethodName Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInit() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSet() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSetAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.ShouldRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRenderAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IComponent.Init(Microsoft.AspNetCore.Blazor.Components.RenderHandle) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters(Microsoft.AspNetCore.Blazor.Components.ParameterCollection) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent(Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker, Microsoft.AspNetCore.Blazor.UIEventArgs) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender.OnAfterRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI.Pages Assembly : GUI.dll Syntax [Layout(typeof(MainLayout))] [Route(\"/BasicRESTServices\")] public class BasicRESTServices : BasicRESTServicesCodeBehind, IComponent, IHandleEvent, IHandleAfterRender Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder Overrides Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder) Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender"
  },
  "ApiDocumentation/netstandard2.0/ConsoleApp.AppHost.html": {
    "href": "ApiDocumentation/netstandard2.0/ConsoleApp.AppHost.html",
    "title": "Class AppHost | Blazor Examples with ServiceStack",
    "keywords": "Class AppHost Inheritance System.Object AppHost Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class AppHost : AppSelfHostBase Constructors AppHost() Base constructor requires a Name and Assembly where web service implementation is located Declaration public AppHost() Methods Configure(Container) Declaration public override void Configure(Container container) Parameters Type Name Description Container container Stop() Declaration public override void Stop()"
  },
  "ApiDocumentation/netcoreapp2.0/ConsoleApp.AppHost.html": {
    "href": "ApiDocumentation/netcoreapp2.0/ConsoleApp.AppHost.html",
    "title": "Class AppHost | Blazor Examples with ServiceStack",
    "keywords": "Class AppHost Inheritance System.Object AppHost Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class AppHost : AppSelfHostBase Constructors AppHost() Base constructor requires a Name and Assembly where web service implementation is located Declaration public AppHost() Methods Configure(Container) Declaration public override void Configure(Container container) Parameters Type Name Description Container container Stop() Declaration public override void Stop()"
  },
  "Api/net471/ConsoleApp.html": {
    "href": "Api/net471/ConsoleApp.html",
    "title": "Namespace ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "Namespace ConsoleApp Classes AppHost BaseServices"
  },
  "Api/netstandard2.0/CommonDTOs.html": {
    "href": "Api/netstandard2.0/CommonDTOs.html",
    "title": "Namespace CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Namespace CommonDTOs Classes InitializationReqDTO InitializationRspDTO PostDataReqDTO PostDataRspDTO"
  },
  "Api/netstandard2.0/GUI.Pages.html": {
    "href": "Api/netstandard2.0/GUI.Pages.html",
    "title": "Namespace GUI.Pages | Blazor Examples with ServiceStack",
    "keywords": "Namespace GUI.Pages Classes _ViewImports BasicRESTServices BasicRESTServicesCodeBehind Index"
  },
  "Api/netcoreapp2.0/ConsoleApp.html": {
    "href": "Api/netcoreapp2.0/ConsoleApp.html",
    "title": "Namespace ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "Namespace ConsoleApp Classes AppHost BaseServices"
  },
  "ApiDocumentation/netstandard2.0/ConsoleApp.BaseServices.html": {
    "href": "ApiDocumentation/netstandard2.0/ConsoleApp.BaseServices.html",
    "title": "Class BaseServices | Blazor Examples with ServiceStack",
    "keywords": "Class BaseServices Inheritance System.Object BaseServices Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class BaseServices : Service Methods Post(InitializationReqDTO) Declaration public object Post(InitializationReqDTO request) Parameters Type Name Description InitializationReqDTO request Returns Type Description System.Object Post(PostDataReqDTO) Declaration public object Post(PostDataReqDTO request) Parameters Type Name Description PostDataReqDTO request Returns Type Description System.Object"
  },
  "ApiDocumentation/net471/CommonDTOs.PostDataReqDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.PostDataReqDTO.html",
    "title": "Class PostDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataReqDTO Inheritance System.Object PostDataReqDTO Implements ServiceStack.IReturn < PostDataRspDTO > ServiceStack.IReturn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/PostData\")] public class PostDataReqDTO : IReturn<PostDataRspDTO>, IReturn Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/net471/GUI.Startup.html": {
    "href": "ApiDocumentation/net471/GUI.Startup.html",
    "title": "Class Startup | Blazor Examples with ServiceStack",
    "keywords": "Class Startup Inheritance System.Object Startup Namespace : GUI Assembly : GUI.dll Syntax public class Startup : object Methods Configure(IBlazorApplicationBuilder) Declaration public void Configure(IBlazorApplicationBuilder app) Parameters Type Name Description IBlazorApplicationBuilder app ConfigureServices(IServiceCollection) Declaration public void ConfigureServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services"
  },
  "ApiDocumentation/netcoreapp2.0/GUI.Pages.BasicRESTServicesCodeBehind.html": {
    "href": "ApiDocumentation/netcoreapp2.0/GUI.Pages.BasicRESTServicesCodeBehind.html",
    "title": "Class BasicRESTServicesCodeBehind | Blazor Examples with ServiceStack",
    "keywords": "Class BasicRESTServicesCodeBehind Inheritance System.Object BasicRESTServicesCodeBehind BasicRESTServices Namespace : GUI.Pages Assembly : GUI.dll Syntax public class BasicRESTServicesCodeBehind : BlazorComponent Fields dataReceivedFromPost Declaration public string dataReceivedFromPost Field Value Type Description System.String dataToPost Declaration public string dataToPost Field Value Type Description System.String labelForDataReceivedFromPost Declaration public const string labelForDataReceivedFromPost = null Field Value Type Description System.String labelForDataToPost Declaration public const string labelForDataToPost = null Field Value Type Description System.String labelForPostDataDataButton Declaration public const string labelForPostDataDataButton = null Field Value Type Description System.String Properties InitializationRspDTO Declaration public InitializationRspDTO InitializationRspDTO { get; set; } Property Value Type Description InitializationRspDTO Logger Declaration public ILogger<BasicRESTServicesCodeBehind> Logger { get; set; } Property Value Type Description ILogger < BasicRESTServicesCodeBehind > Methods OnInitAsync() Declaration protected override Task OnInitAsync() Returns Type Description Task PostData() Declaration public Task PostData() Returns Type Description Task"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.InitializationReqDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.InitializationReqDTO.html",
    "title": "Class InitializationReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationReqDTO Inheritance System.Object InitializationReqDTO Implements ServiceStack.IReturn < InitializationRspDTO > ServiceStack.IReturn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/Initialization\")] public class InitializationReqDTO : IReturn<InitializationRspDTO>, IReturn Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.PostDataRspDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.PostDataRspDTO.html",
    "title": "Class PostDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataRspDTO Inheritance System.Object PostDataRspDTO Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataRspDTO Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netstandard2.0/GUI.Startup.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Startup.html",
    "title": "Class Startup | Blazor Examples with ServiceStack",
    "keywords": "Class Startup Inheritance System.Object Startup Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI Assembly : GUI.dll Syntax public class Startup Methods Configure(IBlazorApplicationBuilder) Declaration public void Configure(IBlazorApplicationBuilder app) Parameters Type Name Description Microsoft.AspNetCore.Blazor.Builder.IBlazorApplicationBuilder app ConfigureServices(IServiceCollection) Declaration public void ConfigureServices(IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.InitializationRspDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.InitializationRspDTO.html",
    "title": "Class InitializationRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationRspDTO Inheritance System.Object InitializationRspDTO Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationRspDTO"
  },
  "ApiDocumentation/netcoreapp2.0/ConsoleApp.BaseServices.html": {
    "href": "ApiDocumentation/netcoreapp2.0/ConsoleApp.BaseServices.html",
    "title": "Class BaseServices | Blazor Examples with ServiceStack",
    "keywords": "Class BaseServices Inheritance System.Object BaseServices Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class BaseServices : Service Methods Post(InitializationReqDTO) Declaration public object Post(InitializationReqDTO request) Parameters Type Name Description InitializationReqDTO request Returns Type Description System.Object Post(PostDataReqDTO) Declaration public object Post(PostDataReqDTO request) Parameters Type Name Description PostDataReqDTO request Returns Type Description System.Object"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.PostDataReqDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.PostDataReqDTO.html",
    "title": "Class PostDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataReqDTO Inheritance System.Object PostDataReqDTO Implements ServiceStack.IReturn < PostDataRspDTO > ServiceStack.IReturn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/PostData\")] public class PostDataReqDTO : IReturn<PostDataRspDTO>, IReturn Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netstandard2.0/GUI.Shared.MainLayout.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.Shared.MainLayout.html",
    "title": "Class MainLayout | Blazor Examples with ServiceStack",
    "keywords": "Class MainLayout Inheritance System.Object Microsoft.AspNetCore.Blazor.Components.BlazorComponent Microsoft.AspNetCore.Blazor.Layouts.BlazorLayoutComponent MainLayout Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Blazor.Layouts.BlazorLayoutComponent.Body Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTreeMethodName Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInit() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInitAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSet() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSetAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.ShouldRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRenderAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IComponent.Init(Microsoft.AspNetCore.Blazor.Components.RenderHandle) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters(Microsoft.AspNetCore.Blazor.Components.ParameterCollection) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent(Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker, Microsoft.AspNetCore.Blazor.UIEventArgs) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender.OnAfterRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI.Shared Assembly : GUI.dll Syntax public class MainLayout : BlazorLayoutComponent, IComponent, IHandleEvent, IHandleAfterRender Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder Overrides Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder) Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender"
  },
  "Api/netstandard2.0/GUI.html": {
    "href": "Api/netstandard2.0/GUI.html",
    "title": "Namespace GUI | Blazor Examples with ServiceStack",
    "keywords": "Namespace GUI Classes _ViewImports App Program Startup"
  },
  "Api/netcoreapp2.0/GUI.Pages.html": {
    "href": "Api/netcoreapp2.0/GUI.Pages.html",
    "title": "Namespace GUI.Pages | Blazor Examples with ServiceStack",
    "keywords": "Namespace GUI.Pages Classes BasicRESTServicesCodeBehind"
  },
  "ApiDocumentation/netstandard2.0/GUI._ViewImports.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI._ViewImports.html",
    "title": "Class _ViewImports | Blazor Examples with ServiceStack",
    "keywords": "Class _ViewImports Inheritance System.Object Microsoft.AspNetCore.Blazor.Components.BlazorComponent _ViewImports Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTreeMethodName Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInit() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInitAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSet() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSetAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.ShouldRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRenderAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IComponent.Init(Microsoft.AspNetCore.Blazor.Components.RenderHandle) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters(Microsoft.AspNetCore.Blazor.Components.ParameterCollection) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent(Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker, Microsoft.AspNetCore.Blazor.UIEventArgs) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender.OnAfterRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI Assembly : GUI.dll Syntax public class _ViewImports : BlazorComponent, IComponent, IHandleEvent, IHandleAfterRender Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder Overrides Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder) Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender"
  },
  "ApiDocumentation/netstandard2.0/GUI.App.html": {
    "href": "ApiDocumentation/netstandard2.0/GUI.App.html",
    "title": "Class App | Blazor Examples with ServiceStack",
    "keywords": "Class App Inheritance System.Object Microsoft.AspNetCore.Blazor.Components.BlazorComponent App Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender Inherited Members Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTreeMethodName Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInit() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnInitAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSet() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnParametersSetAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.ShouldRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRender() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.OnAfterRenderAsync() Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IComponent.Init(Microsoft.AspNetCore.Blazor.Components.RenderHandle) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters(Microsoft.AspNetCore.Blazor.Components.ParameterCollection) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent(Microsoft.AspNetCore.Blazor.Components.EventHandlerInvoker, Microsoft.AspNetCore.Blazor.UIEventArgs) Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender.OnAfterRender() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : GUI Assembly : GUI.dll Syntax public class App : BlazorComponent, IComponent, IHandleEvent, IHandleAfterRender Methods BuildRenderTree(RenderTreeBuilder) Declaration protected override void BuildRenderTree(RenderTreeBuilder builder) Parameters Type Name Description Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder Overrides Microsoft.AspNetCore.Blazor.Components.BlazorComponent.BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder) Implements Microsoft.AspNetCore.Blazor.Components.IComponent Microsoft.AspNetCore.Blazor.Components.IHandleEvent Microsoft.AspNetCore.Blazor.Components.IHandleAfterRender"
  },
  "ApiDocumentation/net471/CommonDTOs.InitializationReqDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.InitializationReqDTO.html",
    "title": "Class InitializationReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationReqDTO Inheritance System.Object InitializationReqDTO Implements ServiceStack.IReturn < InitializationRspDTO > ServiceStack.IReturn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/Initialization\")] public class InitializationReqDTO : IReturn<InitializationRspDTO>, IReturn Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/net471/ConsoleApp.AppHost.html": {
    "href": "ApiDocumentation/net471/ConsoleApp.AppHost.html",
    "title": "Class AppHost | Blazor Examples with ServiceStack",
    "keywords": "Class AppHost Inheritance System.Object AppHost Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class AppHost : AppSelfHostBase Constructors AppHost() Base constructor requires a Name and Assembly where web service implementation is located Declaration public AppHost() Methods Configure(Container) Declaration public override void Configure(Container container) Parameters Type Name Description Container container Stop() Declaration public override void Stop()"
  },
  "ApiDocumentation/net471/ConsoleApp.BaseServices.html": {
    "href": "ApiDocumentation/net471/ConsoleApp.BaseServices.html",
    "title": "Class BaseServices | Blazor Examples with ServiceStack",
    "keywords": "Class BaseServices Inheritance System.Object BaseServices Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class BaseServices : Service Methods Post(InitializationReqDTO) Declaration public object Post(InitializationReqDTO request) Parameters Type Name Description InitializationReqDTO request Returns Type Description System.Object Post(PostDataReqDTO) Declaration public object Post(PostDataReqDTO request) Parameters Type Name Description PostDataReqDTO request Returns Type Description System.Object"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.InitializationReqDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.InitializationReqDTO.html",
    "title": "Class InitializationReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationReqDTO Inheritance System.Object InitializationReqDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationReqDTO : IReturn<InitializationRspDTO>"
  },
  "ApiDocumentation/netcoreapp2.0/GUI.Program.html": {
    "href": "ApiDocumentation/netcoreapp2.0/GUI.Program.html",
    "title": "Class Program | Blazor Examples with ServiceStack",
    "keywords": "Class Program Inheritance System.Object Program Namespace : GUI Assembly : GUI.dll Syntax public class Program : object Methods CreateHostBuilder(String[]) Declaration public static IWebAssemblyHostBuilder CreateHostBuilder(string[] args) Parameters Type Name Description System.String [] args Returns Type Description IWebAssemblyHostBuilder Main(String[]) Declaration public static void Main(string[] args) Parameters Type Name Description System.String [] args"
  },
  "SolutionDocumentation/GettingStarted.html": {
    "href": "SolutionDocumentation/GettingStarted.html",
    "title": "Getting tarted with the Blazor - ServiceStack Demos | Blazor Examples with ServiceStack",
    "keywords": "Getting tarted with the Blazor - ServiceStack Demos The projects in thei Repository/solution demonstrate howto use Blazor with ServiceStack as the static site server. This repository is not yet sophisticated enough o create a zip with binaries and be able to safely secure that. Instead, only building from source code is supported. 1, Fork the repository and attach your Visual Studio Source Code Control provider to the fork Tell Visual Studio to not build the documentation project."
  },
  "SolutionDocumentation/ReadMe.html": {
    "href": "SolutionDocumentation/ReadMe.html",
    "title": "Blazor Examples Solution-wide Documentation | Blazor Examples with ServiceStack",
    "keywords": "Blazor Examples Solution-wide Documentation Documentation that applis ot all portions of the Solution Directory.Build.props Welcome to the home page for the documentation on my GitHub Blazor Examples repository. This is an Open Source Software (OSS) MIT-licensed repository with code samples and documentation that illustrates how I am using Blazor with ServiceStack , AKA SS. Static Documentation website hosted by GitHub pages The static documentation site has been created with DocFx . It has been organized with information common to all the demos in one section, Repository-wide , and individual demo documentation in a separate section for each demo Demo-Specific . Organization of teh Documentation Building"
  },
  "Demos/Demo01/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo01/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo01/GUI/wwwroot/css/open-iconic/README.html": {
    "href": "Demos/Demo01/GUI/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo01/CommonDTOs/ReadMe.html": {
    "href": "Demos/Demo01/CommonDTOs/ReadMe.html",
    "title": "Readme Demo01 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Readme Demo01 CommonDTOs Documentation for the CommonDTOs used in Demo01 can be found here: Demo01 CommonDTOs Documentation"
  },
  "Demos/Demo01/GUI/ReadMe.html": {
    "href": "Demos/Demo01/GUI/ReadMe.html",
    "title": "GUI ReadMe | Blazor Examples with ServiceStack",
    "keywords": "GUI ReadMe"
  },
  "Demos/Demo01/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo01/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo01/GUI/Documentation/Details.html": {
    "href": "Demos/Demo01/GUI/Documentation/Details.html",
    "title": "GUI QuickStart | Blazor Examples with ServiceStack",
    "keywords": "GUI QuickStart"
  },
  "Demos/Demo01/ConsoleApp/ReadMe.html": {
    "href": "Demos/Demo01/ConsoleApp/ReadMe.html",
    "title": "ReadMe for Demo01 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "ReadMe for Demo01 CommonDTOs"
  },
  "SolutionDocumentation/BuildingNotes.html": {
    "href": "SolutionDocumentation/BuildingNotes.html",
    "title": "Notes on Building the solution | Blazor Examples with ServiceStack",
    "keywords": "Notes on Building the solution Versioning Only in Github, no versioning done in any AssemblyInfo.cs file Directory.Build.Props Tells all projects to use the latest C# language features, and that VersionInformation is explicitly defined in each project. Defines common compilation symbols and flags. ConsoleApp The .csproj should specify <TargetFramework>net471</TargetFramework>. GUI The .csproj should specify <TargetFramework>netnetstandard2.0</TargetFramework>. CommonDTo The .csproj should specify <TargetFrameworks>netstandard2.0;net471</TargetFrameworks>. Note the plural form of the Property. This will ensure that assemblies are built for both target frameworks. Publish Profiles There is a DebugFolderProfile and a ReleaseFolderProfile. Both publish to the filesystem. The DebugFolderProfile publishes to a subfolder relative to the GUI project's folder. The ReleaseFolderProfile publishes to a Release subfolder relative to the root of the solution. NuGet Packaging N/A, none of the projects in this solution create NuGet packages NuGet Packages Used * Demo01 and all others * GUI Project * Blazor (all current NuGet packages) * Blazor Logging Extensions * ServiceStack Project * ServiceStack (At least version 5.4.1 or later) * NLog * Demo02 * GUI Project * ServiceStack.Text Visual Studio Extensions to make coding and debugging easier * [Structured Build Logs]() * [Structured Build Log Viewer]() * [DocFx]() 3-rd party tools to make coding and debugging easier * [Sentinal]() UDP Log sink Building under Visual Studio Building with MSBuild from the command line Building and hosting the documentation website with DocFx"
  },
  "SolutionDocumentation/Organization.html": {
    "href": "SolutionDocumentation/Organization.html",
    "title": "Overview the Documentation | Blazor Examples with ServiceStack",
    "keywords": "Overview the Documentation Conceptual Documentation, such as Getting Started guides, Building guides, Attribution, and Contribution Guidelines, are all stored under Articles or a subfolder of that. The ReadMe.ms files that GitHub expects for the repository at the solution level and at each project level are all found under the ReadMes subfolder. The solution and every project can have a index.md file. This file is the home page in the documentation site for each project and index.md at the Solution level is the documentation home page for the entire Solution. Finally the Solution contains a toc.yml file, which has three parts. Each part consists of a name, base UI, and optional homepage relative URI.Right now, the toc.yml for teh entire solution consists of a Home page, and API subfolder, and an Articles subfolder. Project level: ReadMe.md - shown on gitHub for the project's ReadMe Docs/* files like quickstart (or getting started), building, and attribution, for each project Solution Level ReadMe.md - the Repository ReadMe files Docs/* files in the Docs solution folder of the solution Attribution.md - a conglomeration. Part of ot is links that are recorded at the Solution level in teh Docs/Attribution.md file, and a set of links defined by the Docs/attribution.md files found in each Project. QuickStart.md - How to fork the repository, how to NuGet the libraries (released versions and patch versions), how to get and use the AutoDoc, how to get and use the BuildTooling extensions, how to get and install the PoweShellscripts, how to integrate the PowerShellscripts with VS,)"
  },
  "Demos/Demo01/CommonDTOs/Documentation/Details.html": {
    "href": "Demos/Demo01/CommonDTOs/Documentation/Details.html",
    "title": "Common Data Transfer Objects (DTOs) Project/Assembly | Blazor Examples with ServiceStack",
    "keywords": "Common Data Transfer Objects (DTOs) Project/Assembly Demo01 (and SS-served Blazor apps in general) uses a separate project to create a separate assembly that holds just the definitions of the DTOs. This project is referenced by both the Blazor GUI project and the ConsoleHost project. It ensure that both projects have the same definition of the data being transferred between them. The CommonDTOs project has just one .cs file in it, CommonDTOs.cs, with all of the DTO class definition in that file. DTOs for the /Initialization Route Both the request and response DTOs for /Initialization are empty classes. There is no data transferred in the /Initialization request or in its response, making this the simplest kind of request/response pair. DTOs for the /PostData Route Both the request and response DTOs for /PostData have a single property, of type string , which I've chosen to call StringDataObject . Both the request and the response will carry a payload consisting of just this one value. TargetFrameworks For Demo01, the CommonDTOs assembly will need to link to both the ConsoleApp.exe and with the Blazor GUI assemblies. So the CommonDTOs project specifies a <TargetFrameworks> of both net471 and netstandard2.0. Note the plural form of <TargetFrameworks> used here. This produces two copies of the assembly. The other two projects each reference the CommonDTOs project, and each picks up their corresponding framework-specific assembly from this project's framework-specific <OutputDir> ."
  },
  "Demos/Demo01/Documentation/Overview.html": {
    "href": "Demos/Demo01/Documentation/Overview.html",
    "title": "Overview of Demo01 | Blazor Examples with ServiceStack",
    "keywords": "Overview of Demo01 The purpose of Demo01 is to show the near minimal code needed to deliver the Blazor GUI, and provide two simple REST endpoints that can communicate with the Blazor GUI. ConsoleApp The ConsoleApp program creates an instance of a ServiceStack AppSelfHostBase , initializes it, and starts it listening. The ConsoleApp responds on two specific URLs (the routes), and responds with the index.html when any unknown route is sent.When an request comes for index.html. the page instructs the browser to make many more calls to the ConsoleApp, to fetch the .DLL files, and resource files, needed to render the GUI. The Blazor GUI The GUI is comprised of a home page and a second page with an input field, a button, and a place to show the results of an API call. The home page is index.html, and contains instructions on what to download from the ConsoleApp. The CommonDTOs The CommonDTOs define objects that contain the data fields that will be transmitted between the GUI and the ConsoleApp."
  },
  "Demos/Demo01/ConsoleApp/Documentation/Details.html": {
    "href": "Demos/Demo01/ConsoleApp/Documentation/Details.html",
    "title": "The ServiceStack (SS) ConsoleApp.exe Project/program | Blazor Examples with ServiceStack",
    "keywords": "The ServiceStack (SS) ConsoleApp.exe Project/program A simple Console program the implements the ServiceStack console host for two endpoints, plus the sauce needed to make ServiceStack deliver the static files that make up the GUI. The REST endpoints SS provides the infrastructure to handle REST endpoints as well as serve the static files. Both are supported in the same SS application. Demo01 has two endpoints, whose Routes are; /Initialization and /PostData . Each Route has two Data Transfer Objects (DTOs), one DTO for the route's Request and one for the route's Response. Each endpoint is handled by a SS service. The SS Services that handle the endpoints SS places the code that responds to a Request, and creates the Response, in methods that are part of a class that inherits from SS's Service class. There is a ton of documentation on the web about SS, and its (very feature rich) Service class. Demo01 uses just the most basic of these features. In Demo01, the actions that the Service takes for each endpoint are defined in the AppHost.cs file, in a class there called BaseServices and the two methods therein. One method signature indicates the method should be called for a POST to the /Initialization Route, the other method's signature indicates it should be called for a POST on the /PostData Route. These methods signatures specify the DTO classes for their respective Request and Response. TargetFramework For Demo01, the TargetFramework for the ConsoleApp.exe program is the full .Net, Version 4.7.1 in this case. How to make ServiceStack deliver the Blazor app You will need to start with version 5.4.1 or higher, because ServiceStack developers added some allowed file types to this version to make it work better. The following discussion applies to the code found in AppHost.cs . Allow the delivery of .json files Blazor requires the static file server to deliver a file named blazor.boot.json from the _frameworks subfolder. By default, delivery of .json files are not allowed. In the AppHost.cs file, this line instructs SS to allow the .json suffix. this.Config.AllowFileExtensions.Add(\"json\"); Change the default redirect path Blazor routing requires that when the static file server sees a request made to a URL that does not match a known route, that the server return the contents of index.html. In the AppHost.cs file, this line instructs SS to do that. this.Config.DefaultRedirectPath = \"/index.html\"; Map a virtual path to the location of the files to serve Being able to tell the ConsoleApp where the static files are located is a key requirement.You could use an absolute location, but that would not be very portable. Using a path relative to the location of the executing assembly is more portable. But how to specify that? The answer typically depends on the lifecycle stage of the application. In production, staging, and QA stages, there will be an 'AsInstalled' architecture, and the relationship of the static files to the production .exe will be known. In development under VS, the relationship of the location of static files to the location of the exe being developed, is a bit complicated. A more sophisticated example will use SS AppSettings to create a Configuration setting value that can be controlled by a settings file. But this example will simply use a string constant. In the AppHost.cs file, this line, the var physicalRootPath , specifies the relative location of the ConsoleApp's .exe file to the Blazor app's static files. var physicalRootPath = \"../../../../GUI/bin/Debug/netstandard2.0/Publish/GUI/dist\"; Details on the physicalRootPath value. The value of physicalRootPath shown here is specific to the way VS uses MSBuild, and to the way the GUI's Publish action uses the DebugFolderProfile . GUI project Publish action Under the GUI project's Properties subfolder is the file DebugFolderProfile.pubxml . This file has the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl>. I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir>. Since the <publishUrl> is relative to the <ProjectDir>, I hardcoded the path I wanted (<OutputDir> for Debug and netstandard2.0), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. ConsoleApp's .EXE's location after build By default VS puts the compile/link artifacts of the ConsoleApp under it's project's MSBuild <OutputDir>, which defaults to the ./bin/<Config>/<framework> subfolder relative to the <ProjectDir>. Under VS debugging of the ConsoleApp, VS starts the .exe in that same <OutputDir>. Relative location of the GUI's static content to ConsoleApp's .exe location So to map from the ConsoleApp's .exe startup directory to the GUI's static content files, the physicalRootPath value consist of: The four ../../.././ patterns maps to the MSBuild <SolutionDir> top-level folder, just above each <ProjectDir>. The <SolutionDir> is the root folder common to both the ConsoleApp project's subfolder tree and the GUI project's subfolder tree. From that common folder, the GUI app's static files are down the path <ProjectDir> (GUI), then the location specified in the DebugFolderProfile.pubxml, ( bin/<Config>/<Framework>/Publish ) and then /GUI/dist as created by the Publish operation. Putting it all together, the ConsoleApp knows where the GUI app's static files are by going up the ConsoleApp project's directory tree to the <SolutionDir>, then down the path to the GUI project's $<ProjectDir> and then down into the bin/<Config>/<Framework>/Publish/ specified by <publishUrl> in DebugFolderProfile.pubxml , then down to the subfolder GUI/dist created by the Publish operation. Again to reiterate, the solution above is very specific to the way VS and MSBuild works, and that specific convoluted physicalRootPath is specific to the way the example project structure was organized. In production or other scenarios, the var physicalRootPath would have a different value.. Details on the virtualRootPath In the first example, the GUI uses an empty virtual path root. In the AppHost.cs file, this line, the var virtualRootPath , specifies the virtual path to the GUI Blazor app's static files. Using an empty path for the virtual path means, for this example, that Index.html is found at ( http://localhost:21200/Index.html ). var virtualRootPath = \"\"; Later examples (hopefully) will show that non-empty values will let SS support multiple Blazor GUIs side-by-side, by aligning different virtualRootPath values with different physicalRootPath values, and modifying each Blazor GUI project's base URL routing slightly. Map it In the ConsoleApp's AppHost.cs Configure method, the following line tells SS to add a new location from which to serve static files that do not match a known SS route. this.AddVirtualFileSources.Add(new FileSystemMapping(virtualRootPath, physicalRootPath)); It appears wrapped in a try-catch block, to catch an exception if the physicalRootPath does not exists. Add CORS support to SS Blazor apps require that Cross Browser Scripting Requests be allowed. SS makes it very easy to support CORS, by including the following lines in the ConsoleApp's AppHost.cs Configure method: Plugins.Add(new CorsFeature( allowedMethods: \"GET, POST, PUT, DELETE, OPTIONS\", allowedOrigins: \"*\", allowCredentials: true, allowedHeaders: \"content-type, Authorization, Accept\")); This is all that's required for SS to serve a Blazor application!"
  },
  "Demos/Demo01/ReadMe.html": {
    "href": "Demos/Demo01/ReadMe.html",
    "title": "Demo01 Blazor GUI served by ServiceStack having two REST endpoints | Blazor Examples with ServiceStack",
    "keywords": "Demo01 Blazor GUI served by ServiceStack having two REST endpoints The first example program is the most basic. The Blazor GUI portion consists of two Razor pages, and code that makes two REST calls to ServiceStack, one REST call with no data payload sent or received, and one that sends a string and receives a string. The ServiceStack application portion consist of a Console program for .Net (full framework) which serves the static files for the Blazor application, and handles the two simple REST service endpoints. The CommonDTOs project defines the data payload sent and received between the ConsoleApp and the Blazor GUI. : [Demo01 Overview](Documentation/Overview.html)"
  },
  "index.html": {
    "href": "index.html",
    "title": "Blazor Examples Documentation Site Root Home Page | Blazor Examples with ServiceStack",
    "keywords": "Blazor Examples Documentation Site Root Home Page You should be redirected to this repository's ReadMe.html page. If it doesn't happen automatically, please click on the link ReadMe.html"
  },
  "README.html": {
    "href": "README.html",
    "title": "Examples of Blazor Apps served By ServiceStack | Blazor Examples with ServiceStack",
    "keywords": "Examples of Blazor Apps served By ServiceStack Here's a link to more detailed documentation on these examples , Blazor is an experimental technology from Microsoft that allows applications written in C# to run on any browser that supports WASM. Here is where you can find Blazor's Getting Started page . Many other folks have written better introductions and explanations of Blazor and WASM than I can, so please search the Web for those terms if you would like detailed background information on this emerging technology. Blazor applications can run server-side (Server-Side Blazor, or SSB), or client-side (Client-Side Blazor, or CSB). The demos in this repository are all about client-side Blazor. The files needed to run a Blazor application can be served to a browser by any process that understands HTTP and can serve static files. Of course, all the popular web server packages can do this, as can many Cloud services. There are many resources on the web that can go into much greater detail for using those technologies. However, I've been looking for a way to leverage the browser as a GUI for an application that runs on multiple operating systems. Most application that need a GUI have to create the GUI specifically for an OS. Blazor brings the ability for developers to write their GUI in Razor and C#, publish it to a set of static files, and have any browser render and run the GUI. An application that leverages .Net, .Net Standard, and .Net Core to run on multiple OSs, combined with a Blazor-based GUI, promises to greatly reduce the platform-specific portions of any multi-OS application. ServiceStack is a very popular product that provides REST endpoints for an application. ServiceStack can also serve static files. Combining the two, ServiceStack can serve the files needed for a Blazor GUI, and can also serve the REST endpoints that allow the GUI to communicate with the application. This repository will focus specifically on using the ServiceStack application to serve and interact with a Blazor application. The contents of this repository will be demonstration programs showing how to integrate Blazor with various ServiceStack features. These demos are simplified versions of the ACE application and it's Blazor GUI, which is in the Ace repository adjacent to this one. You will also find that the documentation here may refer to documentation found in the ATAP.Utilities repository, for further information regarding utilities written to aid in the building and debugging of applications using Visual studio. Getting Started Currently the only way to use these demos is to fork the repository and build the demos. Here are some instructions on how to fork a GitHub repository Building, Running, and Debugging these demos The Common Documentation for all Demos has a section for Building, Running, and Debugging Example 1 The first example program is the most basic. The Blazor GUI portion consists of two Razor pages, and code that makes two REST calls to ServiceStack, one REST call with no data payload sent or received, and one that sends a string and receives a string. The ServiceStack application portion consist of a Console program for .Net (full framework) which serves the static files for the Blazor application, and handles the two simple REST service endpoints. Prerequisites Visual Studio 2017 Version 15.8 or newer. All of the following instructions assume you are using a Visual Studio (VS) 2017 IDE for development, and are pretty familiar with using Git and GitHub in VS. ServiceStack (SS) Version 5.4.1. Instructions for adding ServiceStack via NuGet into a solution can be found here: https://servicestack.net/download . Unless you purchase a license, SS will be the \"Starter\" version, limited to about 10 REST service endpoints Each of the demonstration programs here will be written to stay below the limit. You should also be aware that the ServiceStack development team does a great job of patching and enhancing ServiceStack, and there may be times you will want to get new patches from ServiceStack's MyGet feed. You will want to go to VS's Tools-> Options -> NuGet Package Manager -> Package Sources and add to the \"Available package sources\". Add https://www.myget.org/F/servicestack to the list of package sources. Blazor 0.6.0 components installed into VS. Instructions for getting Blazor setup for VS can be found here: https://blazor.net/docs/get-started.html . Blazor is changing rapidly, and I will do my best to ensure that the examples in this repository track the changes in Blazor. A logging framework such as the Open Source Software (OSS) NLog installed into VS. A good post explaining how to integrate NLog with VS can be found here: https://www.codeguru.com/csharp/csharp/cs_network/integrating-nlog-with-visual-studio.html . The examples here use NLog. The NLog configuration file included in these examples also specifies a UDP-based logger. Sentinel, described below is a good choice for a UDP-based logging application. Blazor logging framework. Source and ReadMe.md for the extensions can be found here: https://github.com/BlazorExtensions/Logging . A good post explaining how to use the extension in your Blazor project can be found here: https://www.c-sharpcorner.com/article/introduction-to-logging-framework-in-blazor-with-net-core/ . The examples in this repository are currently using Version 0.9.0. I will do my best to ensure that the examples in this repository track the changes in the Blazor logging extensions. Suggested but not required The free UDP logging application Sentinel Version 0.13.0.0 or equivalent, which can be installed to Windows from here: https://github.com/yarseyah/sentinel . Telerik's free Fiddler 4 product or equivalent for monitoring the HTTP traffic between the browser and the ServiceStack instance, which can be installed from here: https://www.telerik.com/download/fiddler . Getting Started Install the prerequisites listed above onto your development computer. Install and configure the two monitoring tools, Sentinel and Fiddler, if desired. Getting Example 1 Get a copy of the example's source code. You may do this by forking this repository into your own repository, and connecting VS's Team Explorer on you development computer to the new remote repository, and making a local branch of the remote repository on your development computer. This is great if you want to play with the example under version control. You may just want to download a zip of the source code from GitHub and expand it on your local development computer, and work with it disconnected from Git version control. Compiling and Publishing Example 1 Open the Solution file (.sln) with VS. The solution file describes the three individual projects and the solution folders, and the local branch of the fork (or extracted zip) will create the physical subdirectories that correspond to the layout of the project in the solution file. Ensure the build configuration at the solution level is Debug , that the build configuration trickles down to all three projects. right-click the solution in Solution Explorer, and click \"Build Solution\". right-click the ConsoleApp project in Solution explorer, and select \"Set as Startup Project\". right-click the GUI project, and select \"Publish...\". On the GUI Publish page that appears, ensure the Profile dropdown is displaying DebugFolderProfile , then press the Publish button. Before running the example, I suggest you get the monitoring tools up and running. These are not required, but they certainly make it much easier to see what the programs are doing. Instructions for doing so are further down in this document, under \"Starting the Monitoring tools\". Run the Example Press F5 key in VS, and the ConsoleApp will start under the debugger. Running the Console App under the VS debugger provides all the usual VS debugger goodness, so you will probably want to start the ConsoleApp with F5 most of the time. If all goes well, shortly after pressing F5, a console window will appear above (obscuring part of) VS, with the ConsoleApp's welcome message. Just leave the window up. As the ConsoleApp runs, it will print log messages to this window (as well as to Sentinel). Pressing any key in this console window will end the application. Pressing F5 again will start it again. Browse to the port that the ConsoleApp is configured to ListeningOn Bring up a browser. Whatever browser you please, as long as it is modern enough to run WASM. If you are interested in this article, you probably keep the browser on your development computer pretty recent. Navigate the browser to the ConsoleApp's listening URL ( http://locahost:21200 ) as configured in this example. You should see the home page of the example appear in your browser, and Fiddler should show you a lot of traffic as ServiceStack delivers to the browser all the files requested by the Blazor app, both normal CSS content, and all the DLL files too. Standard Edit/Compile/Debug cycle for these demos goes like this. After making changes to the GUI, publish it, which will build as a first step. After making changes to the ConsoleApp, press F5 to start it under the debugger, which will build as a first step. If you make changes to both, be sure to Publish the GUI before building/debugging the ConsoleApp. Open a browser and type in the network address where the Console App is listening ServiceStack, \" http://localhost:22100 \" Look at the Fiddler and Sentinel windows, and the browser console, and correlate the log messages there. Use VS's debugger to set breakpoints and examine code and data in the ConsoleApp. The client-side WASM app in the bowser doesn't have debugger support yet, but that will change eventually, and I hope to keep these demos updated. For now, debugging is via the old-fashioned way, log message tracing. Blazor log messages go to the browser's Console window, which can be viewed in the browser's Developer tools. The normal way to display the Developer tools in a browser is to press F12. How to make ServiceStack deliver the Blazor app You will need to start with version 5.4.1 or higher, because ServiceStack developers added some allowed file types to this version to make it work better. Allow the delivery of .json files Blazor requires the static file server to deliver a file named blazor.boot.json from the _frameworks subfolder. By default, delivery of .json files are not allowed. In the AppHost.cs file, this line instructs SS to allow the .json suffix. this.Config.AllowFileExtensions.Add(\"json\"); Change the default redirect path Blazor routing requires that when the static file server sees a request made to a URL that does not match a known route, that the server return the contents of index.html. In the AppHost.cs file, this line instructs SS to do that. this.Config.DefaultRedirectPath = \"/index.html\"; Map a virtual path to the location of the files to serve Being able to tell the ConsoleApp where the static files are located is a key requirement.You could use an absolute location, but that would not be very portable. Using a path relative to the location of the executing assembly is more portable. But how to specify that? The answer typically depends on the lifecycle stage of the application. In production, staging, and QA stages, there will be an 'AsInstalled' architecture, and the relationship of the static files to the production .exe will be known. In development under VS, the relationship of the location of static files to the location of the exe being developed, is a bit complicated. A more sophisticated example will use SS AppSettings to create a Configuration setting value that can be controlled by a settings file. But this example will simply use a string constant. In the AppHost.cs file, this line, the var physicalRootPath , specifies the relative location of the ConsoleApp's .exe file to the Blazor app's static files. var physicalRootPath = \"../../../../GUI/bin/Debug/netstandard2.0/Publish/GUI/dist\"; Details on the physicalRootPath value. The value of physicalRootPath shown here is specific to the way VS uses MSBuild, and to the way the GUI's Publish action uses the DebugFolderProfile . GUI project Publish action Under the GUI project's Properties subfolder is the file DebugFolderProfile.pubxml . This file has the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl>. I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir>. Since the <publishUrl> is relative to the <ProjectDir>, I hardcoded the path I wanted (<OutputDir> for Debug and netstandard2.0), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. ConsoleApp's .EXE's location after build By default VS puts the compile/link artifacts of the ConsoleApp under it's project's MSBuild <OutputDir>, which defaults to the ./bin/<Config>/<framework> subfolder relative to the <ProjectDir>. Under VS debugging of the ConsoleApp, VS starts the .exe in that same <OutputDir>. Relative location of the GUI's static content to ConsoleApp's .exe location So to map from the ConsoleApp's .exe startup directory to the GUI's static content files, the physicalRootPath value consist of: The four ../../.././ patterns maps to the MSBuild <SolutionDir> top-level folder, just above each <ProjectDir>. The <SolutionDir> is the root folder common to both the ConsoleApp project's subfolder tree and the GUI project's subfolder tree. From that common folder, the GUI app's static files are down the path <ProjectDir> (GUI), then the location specified in the DebugFolderProfile.pubxml, ( bin/<Config>/<Framework>/Publish ) and then /GUI/dist as created by the Publish operation. Putting it all together, the ConsoleApp knows where the GUI app's static files are by going up the ConsoleApp project's directory tree to the <SolutionDir>, then down the path to the GUI project's $<ProjectDir> and then down into the bin/<Config>/<Framework>/Publish/ specified by <publishUrl> in DebugFolderProfile.pubxml , then down to the subfolder GUI/dist created by the Publish operation. Again to reiterate, the solution above is very specific to the way VS and MSBuild works, and that specific convoluted physicalRootPath is specific to the way the example project structure was organized. In production or other scenarios, the var physicalRootPath would have a different value.. Details on the virtualRootPath In the first example, the GUI uses an empty virtual path root. In the AppHost.cs file, this line, the var virtualRootPath , specifies the virtual path to the GUI Blazor app's static files. Using an empty path for the virtual path means, for this example, that Index.html is found at ( http://localhost:21200/Index.html ). var virtualRootPath = \"\"; Later demos (hopefully) will show that non-empty values will let SS support multiple Blazor GUIs side-by-side, by aligning different virtualRootPath values with different physicalRootPath values, and modifying each Blazor GUI project's base URL routing slightly. Map it In the ConsoleApp's AppHost.cs Configure method, the following line tells SS to add a new location from which to serve static files that do not match a known SS route. this.AddVirtualFileSources.Add(new FileSystemMapping(virtualRootPath, physicalRootPath)); It appears wrapped in a try-catch block, to catch an exception if the physicalRootPath does not exists. Add CORS support to SS Blazor apps require that Cross Browser Scripting Requests be allowed. SS makes it very easy to support CORS, by including the following lines in the ConsoleApp's AppHost.cs Configure method: Plugins.Add(new CorsFeature( allowedMethods: \"GET, POST, PUT, DELETE, OPTIONS\", allowedOrigins: \"*\", allowCredentials: true, allowedHeaders: \"content-type, Authorization, Accept\")); This is all that's required for SS to serve a Blazor application! The ServiceStack ConsoleApp program The REST endpoints SS provides the infrastructure to handle REST endpoints as well as serve the static files. Both are supported in the same SS application. Example 1 has two endpoints, whose Routes are; /Initialization and /PostData . Each Route has two Data Transfer Objects (DTOs), one DTO for the route's Request and one for the route's Response. Each endpoint is handled by a SS service. The SS Services that handle the endpoints SS places the code that responds to a Request, and creates the Response, in methods that are part of a class that inherits from SS's Service class. There is a ton of documentation on the web about SS, and its (very feature rich) Service class. Example 1 uses just the most basic of these features. The actions that the Service takes for each endpoint are defined in the AppHost.cs file, in a class there called BaseServices and the two methods therein. One method signature indicates the method should be called for a POST to the /Initialization route, the other method's signature indicates it should be called for a POST on the /PostData route. These methods require the DTO classes for their respective request and response. TargetFramework For Example 1, the TargetFramework for the ConsoleApp is the full .Net, Version 4.7.1 in this case. The DTOs project Example 1 (and SS-served Blazor apps in general) will use a separate project to create a separate assembly that holds just the definitions of the DTOs. This project is referenced by both the Blazor GUI project and the ConsoleHost project. It ensure that both projects have the same definition of the data being transferred between them. The DTO project has just one .cs file in it, CommonDTOs.cs, with all of the DTO class definition in that file. DTOs for Initialization Route Both the request and response DTOs for /Initialization are empty classes. There is no data transferred in the /Initialization request or in its response, making this the simplest kind of Request/Response pair. DTOs for PostData Route Both the request and response DTOs for /PostData have a single Property, of type string , which I've chosen to call StringDataObject . Both the request and the response will carry a payload consisting of just this one value. TargetFrameworks For Example 1, the CommonDTOs assembly has to link to both the ConsoleApp .exe and with the Blazor GUI assemblies. So the CommonDTOs project specifies a <TargetFrameworks> of both net471 and netstandard2.0. Note the plural form of <TargetFrameworks> used here. This produces two copies of the assembly. The other two projects reference the CommonDTOs project, and each picks up their corresponding framework-specific assembly from this project's framework-specific <OutputDir>. GUI Blazor app The GUI app has two pages and a Nav component to move between them. It is very closely based on the \"first Blazor app\" example produced by the Blazor team. This example is explained here:( https://blazor.net/docs/tutorials/build-your-first-blazor-app.html ) Index.cshtml This is the home page of the app, and simply has some welcome text. BasicRESTServices.cshtml This is the presentation page of the app that demonstrates calling into the ConsoleHost's two routes. When the page is loaded, it calls the /Initialization route. For the /PostData route, enter some string into the top input field, and press the submit button. It will be POSTed to the ConsoleApp, which will copy the payload from the request and put it into the response, and return it to the GUI app, where it will be displayed in the bottom field. BasicRESTServices.cshtml.cs This is the codebehind page of the app that supplies the C# code referenced by the BasicRESTServices.cshtml presentation page. TargetFramework Like all Blazor client-side apps, the TargetFramework for the GUI app is .Net Standard 2.0 (currently). Conclusion If you are interested in using Blazor in architecture solutions that don't allow for a web server, I hope these demos help you understand one such approach that uses ServiceStack instead of a web server. if you find errors in the code or this documentation please create a issue in the GitHub repository. Enjoy! Extras Starting the Monitoring tools Start Fiddler, ensure it is listening to all processes. There will be a lot of cruft in the window, hundreds of request/response pairs from all the browser windows you probably have open on your development computer. It takes a while working with Fiddler to setup filters that eliminate all the other HTTP traffic coming and going in your computer, until you can see just the Blazor and ServiceStack traffic. Start Sentinel, and go through its startup screens to setup the UDP listener, which will be listening for logging messages broadcast to its default listening port. This would also be a good time to inspect the NLog.config file in the example. You will see that it sends all messages from any class to two loggers, the Console logger (for the ConsoleApp's console window), and to the UDP logger as well. So for this example, the Sentinel logging program is not 100% necessary, but it will be necessary later, when ServiceStack is running in a mode that has no console (called headless mode). Getting it setup and running also makes development much easier, as the log message don't all disappear as soon as the program stops. launchSettings.json If you would like to save some keystrokes, VS can be configured to start your browser and navigate to a URL when your press F5. This is controlled by the launchSettings.json file. In this example, the launchSettings.json file is found under the Properties subfolder of the ConsoleApp's subfolder. Another launchSettings.json file is found under the Properties subfolder of the GU's subfolder. Settings launchBrowser to true and launchUrl to http://localhost:21200 should make this happen. (TBD, this is documented in Microsoft as working for .Net Core Web applications, and it works for one of my non-Core SS Blazor apps (ACE), but I've not yet isolated the settings needed to make it work for these Blazor demos. As of now, Publishing the GUI application causes a new browser tab to appear, but starting the ConsoleApp does not.)"
  },
  "Demos/ReadMe.html": {
    "href": "Demos/ReadMe.html",
    "title": "Common Documentation for all Demos | Blazor Examples with ServiceStack",
    "keywords": "Common Documentation for all Demos Information here relates to all of the demos. At the bottom of this page is a list of the demos and what each does Prerequisites Visual Studio (VS) 2017 Version 15.8 or newer. All of the following instructions assume you are using a Visual Studio (VS) 2017 IDE for development. The section below on Building does reference additional documentation on options for building the demos outside of Visual Studio Familiarity with using Git and GitHub in VS. ServiceStack (SS) Version 5.*. You will need to refer to Instructions for adding ServiceStack via NuGet into a solution . Unless you purchase a license, SS will be the \"Starter\" version, limited to about 10 REST service endpoints Each of the demonstration programs here will be written to stay below the limit. You should also be aware that the ServiceStack development team does a great job of patching and enhancing ServiceStack, and there may be times you will want to get new patches from ServiceStack's MyGet feed. You will want to go to VS's Tools -> Options -> NuGet Package Manager -> Package Sources and add to the \"Available package sources\". Add https://www.myget.org/F/servicestack to the list of package sources. Blazor components installed into VS. Instructions for getting Blazor setup for VS can be found here: https://blazor.net/docs/get-started.html . Blazor is changing rapidly, and I will do my best to ensure that the demos in this repository track the changes in Blazor. A logging framework such as the Open Source Software (OSS) NLog installed into VS. A good post explaining how to integrate NLog with VS can be found here: https://www.codeguru.com/csharp/csharp/cs_network/integrating-nlog-with-visual-studio.html . The demos here use NLog. The NLog configuration file included in these demos also specifies a UDP-based logger. Sentinel , described below, is a good choice for a UDP-based logging application. Blazor logging framework. Source and ReadMe.md for the extensions can be found here: https://github.com/BlazorExtensions/Logging . A good post explaining how to use the extension in your Blazor project can be found here: https://www.c-sharpcorner.com/article/introduction-to-logging-framework-in-blazor-with-net-core/ . The demos in this repository are currently using Version 0.9.0. I will try to ensure that the demos in this repository track the changes in the Blazor logging extensions. Building the demos All of these instructions refer back to the Atap.Utilities repository's documentation that provides my most up-to-date instructions on building solutions in these repositories. Building a solution from Visual Studio Building a solution Using MSBuild via a Command Line Interface (CLI) Building a solution using the DotNet build command Building and Publishing the Blazor GUI The Blazor GUI requires an additional publishing step beyond just building the application. In all of these demos, we will use the following architecture for the base location where the Publish step will put the files that make up the Blazor GUI. Blazor GUI. In each Demo, under the GUI project's Properties subfolder, are the two files DebugFolderProfile.pubxml and ReleaseFolderProfile.pubxml . These files have the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl> . I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir> . Since the <publishUrl> is relative to the <ProjectDir> , I hardcoded the path I wanted for Debug builds ( <OutputDir> for Debug and <TargetFramework netstandard2.0 ), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. Running and debugging the demos Running a ServiceStack ConsoleApp from within Visual Studio Running a ServiceStack ConsoleApp from via a Command Line Interface (CLI) Running a ServiceStack ConsoleApp via the DotNet run command A List of the Demos Demo01 : Blazor GUI served by ServiceStack having two REST endpoints The first example program is the most basic. The Blazor GUI portion consists of two Razor pages, and code that makes two REST calls to ServiceStack, one REST call with no data payload sent or received, and one that sends a string and receives a string. The ServiceStack application portion consist of a Console program for .Net (full framework) which serves the static files for the Blazor application, and handles the two simple REST service endpoints. The CommonDTOs project defines the data payload sent and received between the ConsoleApp and the Blazor GUI."
  }
}