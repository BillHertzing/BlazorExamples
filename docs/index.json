{
  "ApiDocumentation/net471/ConsoleApp.html": {
    "href": "ApiDocumentation/net471/ConsoleApp.html",
    "title": "Namespace ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "Namespace ConsoleApp Classes AppHost BaseServices"
  },
  "ApiDocumentation/net471/CommonDTOs.RspComplexDataDictionaryAsStringDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.RspComplexDataDictionaryAsStringDTO.html",
    "title": "Class RspComplexDataDictionaryAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class RspComplexDataDictionaryAsStringDTO Inheritance System.Object RspComplexDataDictionaryAsStringDTO Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class RspComplexDataDictionaryAsStringDTO Properties ComplexDataDictionaryAsString Declaration public string ComplexDataDictionaryAsString { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/net471/CommonDTOs.ReqComplexDataDictionaryAsStringDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.ReqComplexDataDictionaryAsStringDTO.html",
    "title": "Class ReqComplexDataDictionaryAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ReqComplexDataDictionaryAsStringDTO Inheritance System.Object ReqComplexDataDictionaryAsStringDTO Implements ServiceStack.IReturn < RspComplexDataDictionaryAsStringDTO > ServiceStack.IReturn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/PostComplexDataDictionaryAsString\")] public class ReqComplexDataDictionaryAsStringDTO : IReturn<RspComplexDataDictionaryAsStringDTO>, IReturn Properties ComplexDataDictionaryAsString Declaration public string ComplexDataDictionaryAsString { get; set; } Property Value Type Description System.String Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/net471/CommonDTOs.ComplexDataReqDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.ComplexDataReqDTO.html",
    "title": "Class ComplexDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataReqDTO Inheritance System.Object ComplexDataReqDTO Implements ServiceStack.IReturn < ComplexDataRspDTO > ServiceStack.IReturn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/PostComplexData\")] public class ComplexDataReqDTO : IReturn<ComplexDataRspDTO>, IReturn Constructors ComplexDataReqDTO() Declaration public ComplexDataReqDTO() ComplexDataReqDTO(ComplexData) Declaration public ComplexDataReqDTO(ComplexData complexData) Parameters Type Name Description ComplexData complexData Properties ComplexData Declaration public ComplexData ComplexData { get; set; } Property Value Type Description ComplexData Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.RspComplexDataAsStringDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.RspComplexDataAsStringDTO.html",
    "title": "Class RspComplexDataAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class RspComplexDataAsStringDTO Inheritance System.Object RspComplexDataAsStringDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class RspComplexDataAsStringDTO : object Properties ComplexDataAsString Declaration public string ComplexDataAsString { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexData.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexData.html",
    "title": "Class ComplexData | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexData Inheritance System.Object ComplexData Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexData : object Properties DateTimeData Declaration public DateTime DateTimeData { get; set; } Property Value Type Description System.DateTime DecimalData Declaration public decimal DecimalData { get; set; } Property Value Type Description System.Decimal DoubleData Declaration public double DoubleData { get; set; } Property Value Type Description System.Double IntData Declaration public int IntData { get; set; } Property Value Type Description System.Int32 StringData Declaration public string StringData { get; set; } Property Value Type Description System.String TimeSpanData Declaration public TimeSpan TimeSpanData { get; set; } Property Value Type Description System.TimeSpan"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.html",
    "title": "Namespace CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Namespace CommonDTOs Classes ComplexData ComplexDataDictionary ComplexDataDictionaryReqDTO ComplexDataDictionaryRspDTO ComplexDataReqDTO ComplexDataRspDTO InitializationReqDTO InitializationRspDTO PostDataReqDTO PostDataRspDTO ReqComplexDataAsStringDTO ReqComplexDataDictionaryAsStringDTO RspComplexDataAsStringDTO RspComplexDataDictionaryAsStringDTO"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataDictionary.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataDictionary.html",
    "title": "Class ComplexDataDictionary | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionary Inheritance System.Object ComplexDataDictionary Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataDictionary : object Properties ComplexDataDict Declaration public Dictionary<string, ComplexData> ComplexDataDict { get; set; } Property Value Type Description Dictionary < System.String , ComplexData >"
  },
  "ApiDocumentation/net471/CommonDTOs.RspComplexDataAsStringDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.RspComplexDataAsStringDTO.html",
    "title": "Class RspComplexDataAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class RspComplexDataAsStringDTO Inheritance System.Object RspComplexDataAsStringDTO Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class RspComplexDataAsStringDTO Properties ComplexDataAsString Declaration public string ComplexDataAsString { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.ReqComplexDataAsStringDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.ReqComplexDataAsStringDTO.html",
    "title": "Class ReqComplexDataAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ReqComplexDataAsStringDTO Inheritance System.Object ReqComplexDataAsStringDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ReqComplexDataAsStringDTO : IReturn<RspComplexDataAsStringDTO> Properties ComplexDataAsString Declaration public string ComplexDataAsString { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/net471/CommonDTOs.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.html",
    "title": "Namespace CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Namespace CommonDTOs Classes ComplexData ComplexDataDictionary ComplexDataDictionaryReqDTO ComplexDataDictionaryRspDTO ComplexDataReqDTO ComplexDataRspDTO InitializationReqDTO InitializationRspDTO PostDataReqDTO PostDataRspDTO ReqComplexDataAsStringDTO ReqComplexDataDictionaryAsStringDTO RspComplexDataAsStringDTO RspComplexDataDictionaryAsStringDTO"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.html",
    "title": "Namespace CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Namespace CommonDTOs Classes ComplexData ComplexDataDictionary ComplexDataDictionaryReqDTO ComplexDataDictionaryRspDTO ComplexDataReqDTO ComplexDataRspDTO InitializationReqDTO InitializationRspDTO PostDataReqDTO PostDataRspDTO ReqComplexDataAsStringDTO ReqComplexDataDictionaryAsStringDTO RspComplexDataAsStringDTO RspComplexDataDictionaryAsStringDTO"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataRspDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataRspDTO.html",
    "title": "Class ComplexDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataRspDTO Inheritance System.Object ComplexDataRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataRspDTO : object Constructors ComplexDataRspDTO() Declaration public ComplexDataRspDTO() ComplexDataRspDTO(ComplexData) Declaration public ComplexDataRspDTO(ComplexData complexData) Parameters Type Name Description ComplexData complexData Properties ComplexData Declaration public ComplexData ComplexData { get; set; } Property Value Type Description ComplexData"
  },
  "ApiDocumentation/netstandard2.0/ConsoleApp.BaseServices.html": {
    "href": "ApiDocumentation/netstandard2.0/ConsoleApp.BaseServices.html",
    "title": "Class BaseServices | Blazor Examples with ServiceStack",
    "keywords": "Class BaseServices Inheritance System.Object BaseServices Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class BaseServices : Service Methods Post(InitializationReqDTO) Declaration public object Post(InitializationReqDTO request) Parameters Type Name Description InitializationReqDTO request Returns Type Description System.Object Post(PostDataReqDTO) Declaration public object Post(PostDataReqDTO request) Parameters Type Name Description PostDataReqDTO request Returns Type Description System.Object"
  },
  "Demos/Demo05/CommonDTOs/ReadMe.html": {
    "href": "Demos/Demo05/CommonDTOs/ReadMe.html",
    "title": "Readme Demo05 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Readme Demo05 CommonDTOs Documentation for the CommonDTOs used in Demo05 can be found here: Demo05 CommonDTOs Documentation"
  },
  "Demos/Demo04/Documentation/Overview.html": {
    "href": "Demos/Demo04/Documentation/Overview.html",
    "title": "Overview of Demo04 | Blazor Examples with ServiceStack",
    "keywords": "Overview of Demo04 The purpose of Demo04 is to show how to use the ServiceStack clients. It continues to use ServiceStack to deliver the Blazor GUI, and provide two simple REST endpoints that can communicate with the Blazor GUI. ConsoleApp The ConsoleApp program creates an instance of a ServiceStack AppSelfHostBase , initializes it, and starts it listening. The ConsoleApp responds on two specific URLs (the routes), and responds with the index.html when any unknown route is sent. When an request comes for index.html, the page instructs the browser to make many more calls to the ConsoleApp, to fetch the .DLL files, and resource files, needed to render the GUI. The Blazor GUI The GUI is comprised of a home page and a second page with an input field, a button, and a place to show the results of an API call. The home page is index.html, and contains instructions on what to download from the ConsoleApp. The CommonDTOs The CommonDTOs define objects that contain the data fields that will be transmitted between the GUI and the ConsoleApp."
  },
  "Demos/Demo02/Documentation/Overview.html": {
    "href": "Demos/Demo02/Documentation/Overview.html",
    "title": "Overview of Demo02 | Blazor Examples with ServiceStack",
    "keywords": "Overview of Demo02 The purpose of Demo02 is to show that the ServiceStack text.Utils package can be used for JSON serialization / deserialization, and that the SS utility string extension method .Dump() will work as expceted to PrettyPrint a ComplexObject POCO. ConsoleApp The ConsoleApp program for Demo02 starts with the Demo01 Console App, ans simple adds two additional service interfaces to handle the two additional routes added in the CommonDTOs. The Blazor GUI The GUI in Demo 02 starts with teh GUi form Demo01, and adds a ComplexObject to be serialized, along with two buttons to perform the data transfer. The CommonDTOs The CommonDTOs in Demo02 add two routes, and their associated DTO classes. These"
  },
  "Demos/ReadMe.html": {
    "href": "Demos/ReadMe.html",
    "title": "Blazor With ServiceStack Demonstrations ReadMe (at the common Demos Solution subfolder level) | Blazor Examples with ServiceStack",
    "keywords": "Blazor With ServiceStack Demonstrations ReadMe (at the common Demos Solution subfolder level) If you are viewing this ReadMe.md in GitHub, here is this same ReadMe on the documentation site Common Documentation for all Demos Information here relates to all of the demos. At the bottom of this page is a list of the demos and what each does Prerequisites Refer to Getting Started for the necessary prerequisites. Visual Studio (VS) 2017 Version 15.8 or newer. All of the following instructions assume you are using a Visual Studio (VS) 2017 IDE for development. The section below on Building does reference additional documentation on options for building the demos outside of Visual Studio Familiarity with using Git and GitHub in VS. ServiceStack (SS) Version 5.*. You will need to refer to Instructions for adding ServiceStack via NuGet into a solution . Unless you purchase a license, SS will be the \"Starter\" version, limited to about 10 REST service endpoints Each of the demonstration programs here will be written to stay below the limit. You should also be aware that the ServiceStack development team does a great job of patching and enhancing ServiceStack, and there may be times you will want to get new patches from ServiceStack's MyGet feed. You will want to go to VS's Tools -> Options -> NuGet Package Manager -> Package Sources and add to the \"Available package sources\". Add https://www.myget.org/F/servicestack to the list of package sources. Blazor components installed into VS. Instructions for getting Blazor setup for VS can be found here: https://blazor.net/docs/get-started.html . Blazor is changing rapidly, and I will do my best to ensure that the demos in this repository track the changes in Blazor. A logging framework such as the Open Source Software (OSS) NLog installed into VS. A good post explaining how to integrate NLog with VS can be found here: https://www.codeguru.com/csharp/csharp/cs_network/integrating-nlog-with-visual-studio.html . The demos here use NLog. The NLog configuration file included in these demos also specifies a UDP-based logger. Sentinel , described below, is a good choice for a UDP-based logging application. Blazor logging framework. Source and ReadMe.md for the extensions can be found here: https://github.com/BlazorExtensions/Logging . A good post explaining how to use the extension in your Blazor project can be found here: https://www.c-sharpcorner.com/article/introduction-to-logging-framework-in-blazor-with-net-core/ . The demos in this repository are currently using Version 0.9.0. I will try to ensure that the demos in this repository track the changes in the Blazor logging extensions. Building the demos All of these instructions refer back to the Atap.Utilities repository's documentation that provides my most up-to-date instructions on building solutions in these repositories. Building a solution from Visual Studio Building a solution Using MSBuild via a Command Line Interface (CLI) Building a solution using the DotNet build command Building and Publishing the Blazor GUI The Blazor GUI requires an additional publishing step beyond just building the application. In all of these demos, we will use the following architecture for the base location where the Publish step will put the files that make up the Blazor GUI. Blazor GUI. In each Demo, under the GUI project's Properties subfolder, are the two files DebugFolderProfile.pubxml and ReleaseFolderProfile.pubxml . These files have the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl> . I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir> . Since the <publishUrl> is relative to the <ProjectDir> , I hardcoded the path I wanted for Debug builds ( <OutputDir> for Debug and <TargetFramework netstandard2.0 ), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. Running and debugging the demos Running a ServiceStack ConsoleApp from within Visual Studio Running a ServiceStack ConsoleApp from via a Command Line Interface (CLI) Running a ServiceStack ConsoleApp via the DotNet run command A List of the Demos 1. Demo01 : [Blazor GUI served by ServiceStack having two REST endpoints](Demo01/ReadMe.html) The first demonstration program is the most basic. The Blazor GUI portion consists of two Razor pages, and code that makes two REST calls to ServiceStack, one REST call with no data payload sent or received, and one that sends a string and receives a string. The ServiceStack application portion consist of a Console program for .Net (full framework) which serves the static files for the Blazor application, and handles the two simple REST service endpoints. The CommonDTOs project defines the data payload sent and received between the ConsoleApp and the Blazor GUI. Added in V0.1.0 1. Demo02 : [Blazor GUI with ServiceStack TextUtils, using the .Dump() method and the JSON serializer and Deserializer, round-tripping a omplexData object (POCO), and a dictionary of these ComplexData objects] The second demonstration program jumps through hoops to demonstrate that the SS TextUtils can work within the client side Blazor. The .Dump() extension is used to prettyprint complex data objects to a string, and puts it to both the console log and to the Demo02 page. The serializers and deserializers convert complex data objects to / from a string, and uses the built-in HttpClient to send/receive the strings. Added in V0.2.0. 1. Demo03 : [Blazor GUI with ServiceStack C# HttpClient-based JsonHttpClient library] The third demonstration program demonstrates that the SS C# HttpClient-based JsonHttpClient library can work within the client- side Blazor as a replacement for the HttpClient service that Blazor supplies out of the box. Added in V0.3.0. 1. Demo04 : [Blazor GUI with ServiceStack C# Client] The fourth demonstration program demonstrates using some of the SS JsonHttpClient library's features including (TBD). Added in V0.4.0."
  },
  "SolutionDocumentation/Attribution.html": {
    "href": "SolutionDocumentation/Attribution.html",
    "title": "Attribution of ideas | Blazor Examples with ServiceStack",
    "keywords": "Attribution of ideas The maintainers and contributors to this repository feel it is important to credit the individuals and organizations who have taken their time to publish ideas and guides. This document provides a place to mention ALL of teh works that have influenced the design and implementation of the repository's content. Documentation Creation of a repository or project's ReadMe file https://github.com/noffle/art-of-readme https://github.com/jehna/readme-best-practices https://blog.algorithmia.com/github-readme-analyzer/ Creation of a repository's documentation site https://visualstudiomagazine.com/articles/2017/02/21/vs-dotnet-code-documentation-tools-roundup.aspx https://dotnet.github.io/docfx/ DocFx this should someday be created by a docfx merge plugin, to merge Attribution.md files found in each project, up to a master Attribution.html <fyi, all the attribution lines are currently done manually (cut'n'paste)> <multitude of docfx.json files from other early adopter's sites> https://github.com/docascode/docfx-seed/blob/master/docfx.json https://github.com/wekempf/testify/blob/develop/docs/docfx.json https://github.com/googleapis/google-cloud-dotnet/blob/master/docs/root/docfx.json https://github.com/SixLabors/docs/blob/master/docfx.json https://dzone.com/articles/generating-documentation-with-docfx-as-part-of-a-v Adding triple-Slash (///) comments to code https://submain.com/products/ghostdoc.aspx * Commercial editions as well as free community version Visual Studio Doing Builds Build Logging Project System Tools (Structured MSBUILD log viewer) https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools and http://msbuildlog.com/ New Project System for MSBuild https://github.com/dotnet/project-system/blob/master/docs/opening-with-new-project-system.md \" Builds in Docker https://natemcmaster.com/blog/2018/05/12/dotnet-watch-2.1/ Indicates need to add to .csproj. Then implies obj and bin(!) need subdirs of /local and /container Packing into NuGet packages Packing Libraries Library Versioning These libraries use the following attributes for versioning AssemblyInfo - insert link for Semantic versioning AssemblyFileInfo - insert link for date since ? and secs/midnight / 2 AssemblyInformational - insert links that show how modern NuGet resolves the third part in alphabetical order, so alpha resolve before beta, qa, rc, rtm, etc. tbd - link to the BuildTooling documentation in tyhis repository that provides the targets and tasks that update the version during a build if necessary. Library Dependencies Development Versioning and LocalFeed Packing the BuildTools Assemblies BuildTool Versioning BuildTool Dependencies Installing Executables in the user's .nuget Installing PowerShell Scripts in the user's .nuget Installing Documentation for the BuildTools and configuring Visual Studio to recognize it Development Versioning and LocalFeed Packing the Blazor-SserviceStack Examples Assemblies App Versioning App Dependencies Chocolatey Installation script Chocolatey Installation configuration Development Versioning and LocalFeed https://natemcmaster.com/blog/2017/11/11/build-tools-in-nuget/ Obsolete The following links are to projects or articles no longer included in the solution. However, they were considered relevant at one time, and certainly will contain information worth reviewing. MSBump: Used for automatic build number bumping and Nuget Package versioning https://github.com/BalassaMarton/MSBump"
  },
  "README.html": {
    "href": "README.html",
    "title": "Blazor With ServiceStack Demonstrations ReadMe (at the repository root / solution root Solution Item level) | Blazor Examples with ServiceStack",
    "keywords": "Blazor With ServiceStack Demonstrations ReadMe (at the repository root / solution root Solution Item level) If you are viewing this ReadMe.md in GitHub, here is this same ReadMe on the documentation site Blazor is an experimental technology from Microsoft that allows applications written in C# to run on any browser that supports WASM. Here is where you can find Blazor's Getting Started page . Many other folks have written better introductions and explanations of Blazor and WASM than I can, so please search the Web for those terms if you would like detailed background information on this emerging technology. Blazor applications can run server-side (Server-Side Blazor, or SSB), or client-side (Client-Side Blazor, or CSB). The demos in this repository are all about client-side Blazor. The files needed to run a Blazor application can be served to a browser by any process that understands HTTP and can serve static files. Of course, all the popular web server packages can do this, as can many Cloud services. There are many resources on the web that can go into much greater detail for using those technologies. However, I've been looking for a way to leverage the browser as a GUI for an application that runs on multiple operating systems. Most application that need a GUI have to create the GUI specifically for an OS. Blazor brings the ability for developers to write their GUI in Razor and C#, publish it to a set of static files, and have any browser render and run the GUI. An application that leverages .Net, .Net Standard, and .Net Core to run on multiple OSs, combined with a Blazor-based GUI, promises to greatly reduce the platform-specific portions of any multi-OS application. ServiceStack is a very popular product that provides REST endpoints for an application. ServiceStack can also serve static files. Combining the two, ServiceStack can serve the files needed for a Blazor GUI, and can also serve the REST endpoints that allow the GUI to communicate with the application. This repository will focus specifically on using the ServiceStack application to serve and interact with a Blazor application. The contents of this repository will be demonstration programs showing how to integrate Blazor with various ServiceStack features. These demos are simplified versions of the ACE application and it's Blazor GUI, which is in the Ace repository adjacent to this one. You will also find that the documentation here may refer to documentation found in the ATAP.Utilities repository, for further information regarding utilities written to aid in the building and debugging of applications using Visual studio. Getting Started Currently the only way to use these demos is to fork or clone the repository and build the demos. Here are some instructions on how to fork a GitHub repository Building, Running, and Debugging these demos The Common Documentation for all Demos has a section for Building, Running, and Debugging Example 1 The first example program is the most basic. The Blazor GUI portion consists of two Razor pages, and code that makes two REST calls to ServiceStack, one REST call with no data payload sent or received, and one that sends a string and receives a string. The ServiceStack application portion consist of a Console program for .Net (full framework) which serves the static files for the Blazor application, and handles the two simple REST service endpoints. Prerequisites Visual Studio 2019 Preview Version 16.0.0 or newer. All of the following instructions assume you are using a Visual Studio (VS) 2017 IDE for development, and are pretty familiar with using Git and GitHub in VS. ServiceStack (SS) Version 5.5.0. Instructions for adding ServiceStack via NuGet into a solution can be found here: https://servicestack.net/download . Unless you purchase a license, SS will be the \"Starter\" version, limited to about 10 REST service endpoints Each of the demonstration programs here will be written to stay below the limit. You should also be aware that the ServiceStack development team does a great job of patching and enhancing ServiceStack, and there may be times you will want to get new patches from ServiceStack's MyGet feed. You will want to go to VS's Tools-> Options -> NuGet Package Manager -> Package Sources and add to the \"Available package sources\". Add https://www.myget.org/F/servicestack to the list of package sources. Blazor 0.9.0 components installed into VS. Instructions for getting Blazor setup for VS can be found here: https://blazor.net/docs/get-started.html . Blazor is changing rapidly, and I will do my best to ensure that the examples in this repository track the changes in Blazor. .NET Core 3.0 Preview 3 SDK (3.0.100-preview3-010431) installed onto the development computer, and Visual Studio 2019 configured to use preview SDKs. Instructions for loading the .NET Core 3.0 Preview 3 SDK can be found here: https://dotnet.microsoft.com/download/dotnet-core/3.0 . To configure VS 2019 to use the preview version, go to Tools -> Options -> Projects and Solutions -> .NET Core, and check the box \"use previews of the .NET Core SDK\" A logging framework such as the Open Source Software (OSS) NLog installed into VS. A good post explaining how to integrate NLog with VS can be found here: https://www.codeguru.com/csharp/csharp/cs_network/integrating-nlog-with-visual-studio.html . The examples here use NLog. The NLog configuration file included in these examples also specifies a UDP-based logger. Sentinel, described below is a good choice for a UDP-based logging application. Blazor logging framework. Source and ReadMe.md for the extensions can be found here: https://github.com/BlazorExtensions/Logging . A good post explaining how to use the extension in your Blazor project can be found here: https://www.c-sharpcorner.com/article/introduction-to-logging-framework-in-blazor-with-net-core/ . The examples in this repository are currently using Version 0.9.0. I will do my best to ensure that the examples in this repository track the changes in the Blazor logging extensions. As of 4/13/19, the Blazor Logging Framework, both V0.9.0 and V0.10.0, reference Blazor V0.7.0. This causes an incompatability. Logging from teh C# code on the browser is currently \"commented out\" in all examples. I try to update this when the Blazor logging framework is updated. Suggested but not required The free UDP logging application Sentinel Version 0.13.0.0 or equivalent, which can be installed to Windows from here: https://github.com/yarseyah/sentinel . Telerik's free Fiddler 4 product or equivalent for monitoring the HTTP traffic between the browser and the ServiceStack instance, which can be installed from here: https://www.telerik.com/download/fiddler . Getting Started Install the prerequisites listed above onto your development computer. Install and configure the two monitoring tools, Sentinel and Fiddler, if desired. Getting Example 1 Get a copy of the example's source code. You may do this by forking this repository into your own repository, and connecting VS's Team Explorer on you development computer to the new remote repository, and making a local branch of the remote repository on your development computer. This is great if you want to play with the example under version control. You may just want to download a zip of the source code from GitHub and expand it on your local development computer, and work with it disconnected from Git version control. Compiling and Publishing Example 1 Open the Solution file (.sln) with VS. The solution file describes the three individual projects and the solution folders, and the local branch of the fork (or extracted zip) will create the physical subdirectories that correspond to the layout of the project in the solution file. Ensure the build configuration at the solution level is Debug , that the build configuration trickles down to all three projects. right-click the solution in Solution Explorer, and click \"Build Solution\". right-click the ConsoleApp project in Solution explorer, and select \"Set as Startup Project\". right-click the GUI project, and select \"Publish...\". On the GUI Publish page that appears, ensure the Profile dropdown is displaying DebugFolderProfile , then press the Publish button. Before running the example, I suggest you get the monitoring tools up and running. These are not required, but they certainly make it much easier to see what the programs are doing. Instructions for doing so are further down in this document, under \"Starting the Monitoring tools\". Run the Example Press F5 key in VS, and the ConsoleApp will start under the debugger. Running the Console App under the VS debugger provides all the usual VS debugger goodness, so you will probably want to start the ConsoleApp with F5 most of the time. If all goes well, shortly after pressing F5, a console window will appear above (obscuring part of) VS, with the ConsoleApp's welcome message. Just leave the window up. As the ConsoleApp runs, it will print log messages to this window (as well as to Sentinel). Pressing any key in this console window will end the application. Pressing F5 again will start it again. Browse to the port that the ConsoleApp is configured to ListeningOn Bring up a browser. Whatever browser you please, as long as it is modern enough to run WASM. If you are interested in this article, you probably keep the browser on your development computer pretty recent. Navigate the browser to the ConsoleApp's listening URL ( http://locahost:21200 ) as configured in this example. You should see the home page of the example appear in your browser, and Fiddler should show you a lot of traffic as ServiceStack delivers to the browser all the files requested by the Blazor app, both normal CSS content, and all the DLL files too. Standard Edit/Compile/Debug cycle for these demos goes like this. After making changes to the GUI, publish it, which will build as a first step. After making changes to the ConsoleApp, press F5 to start it under the debugger, which will build as a first step. If you make changes to both, be sure to Publish the GUI before building/debugging the ConsoleApp. Open a browser and type in the network address where the Console App is listening ServiceStack, \" http://localhost:22100 \" Look at the Fiddler and Sentinel windows, and the browser console, and correlate the log messages there. Use VS's debugger to set breakpoints and examine code and data in the ConsoleApp. The client-side WASM app in the bowser doesn't have debugger support yet, but that will change eventually, and I hope to keep these demos updated. For now, debugging is via the old-fashioned way, log message tracing. Blazor log messages go to the browser's Console window, which can be viewed in the browser's Developer tools. The normal way to display the Developer tools in a browser is to press F12. How to make ServiceStack deliver the Blazor app You will need to start with version 5.4.1 or higher, because ServiceStack developers added some allowed file types to this version to make it work better. Allow the delivery of .json, .dll, and .wasm files Blazor requires the static file server to deliver a files that have the suffixes .json, .dll, and .wasm. By default, delivery of these types of files are not allowed. In the AppHost.cs file, these line instructs SS to allow the delivery of these kinds of suffixes. this.Config.AllowFileExtensions.Add(\"wasm\"); this.Config.AllowFileExtensions.Add(\"dll\"); this.Config.AllowFileExtensions.Add(\"json\"); Change the default redirect path Blazor routing requires that when the static file server sees a request made to a URL that does not match a known route, that the server return the contents of index.html. In the AppHost.cs file, this line instructs SS to do that. this.Config.DefaultRedirectPath = \"/index.html\"; Map a virtual path to the location of the files to serve Being able to tell the ConsoleApp where the static files are located is a key requirement.You could use an absolute location, but that would not be very portable. Using a path relative to the location of the executing assembly is more portable. But how to specify that? The answer typically depends on the lifecycle stage of the application. In production, staging, and QA stages, there will be an 'AsInstalled' architecture, and the relationship of the static files to the production .exe will be known. In development under VS, the relationship of the location of static files to the location of the exe being developed, is a bit complicated. A more sophisticated example will use SS AppSettings to create a Configuration setting value that can be controlled by a settings file. But this example will simply use a string constant. In the AppHost.cs file, this line, the var physicalRootPath , specifies the relative location of the ConsoleApp's .exe file to the Blazor app's static files. var physicalRootPath = \"../../../../GUI/bin/Debug/netstandard2.0/Publish/GUI/dist\"; Details on the physicalRootPath value. The value of physicalRootPath shown here is specific to the way VS uses MSBuild, and to the way the GUI's Publish action uses the DebugFolderProfile . GUI project Publish action Under the GUI project's Properties subfolder is the file DebugFolderProfile.pubxml . This file has the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl>. I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir>. Since the <publishUrl> is relative to the <ProjectDir>, I hardcoded the path I wanted (<OutputDir> for Debug and netstandard2.0), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. ConsoleApp's .EXE's location after build By default VS puts the compile/link artifacts of the ConsoleApp under it's project's MSBuild <OutputDir>, which defaults to the ./bin/<Config>/<framework> subfolder relative to the <ProjectDir>. Under VS debugging of the ConsoleApp, VS starts the .exe in that same <OutputDir>. Relative location of the GUI's static content to ConsoleApp's .exe location So to map from the ConsoleApp's .exe startup directory to the GUI's static content files, the physicalRootPath value consist of: The four ../../.././ patterns maps to the MSBuild <SolutionDir> top-level folder, just above each <ProjectDir>. The <SolutionDir> is the root folder common to both the ConsoleApp project's subfolder tree and the GUI project's subfolder tree. From that common folder, the GUI app's static files are down the path <ProjectDir> (GUI), then the location specified in the DebugFolderProfile.pubxml, ( bin/<Config>/<Framework>/Publish ) and then /GUI/dist as created by the Publish operation. Putting it all together, the ConsoleApp knows where the GUI app's static files are by going up the ConsoleApp project's directory tree to the <SolutionDir>, then down the path to the GUI project's $<ProjectDir> and then down into the bin/<Config>/<Framework>/Publish/ specified by <publishUrl> in DebugFolderProfile.pubxml , then down to the subfolder GUI/dist created by the Publish operation. Again to reiterate, the solution above is very specific to the way VS and MSBuild works, and that specific convoluted physicalRootPath is specific to the way the example project structure was organized. In production or other scenarios, the var physicalRootPath would have a different value.. Details on the virtualRootPath In the first example, the GUI uses an empty virtual path root. In the AppHost.cs file, this line, the var virtualRootPath , specifies the virtual path to the GUI Blazor app's static files. Using an empty path for the virtual path means, for this example, that Index.html is found at ( http://localhost:21200/Index.html ). var virtualRootPath = \"\"; Later demos (hopefully) will show that non-empty values will let SS support multiple Blazor GUIs side-by-side, by aligning different virtualRootPath values with different physicalRootPath values, and modifying each Blazor GUI project's base URL routing slightly. Map it In the ConsoleApp's AppHost.cs Configure method, the following line tells SS to add a new location from which to serve static files that do not match a known SS route. this.AddVirtualFileSources.Add(new FileSystemMapping(virtualRootPath, physicalRootPath)); It appears wrapped in a try-catch block, to catch an exception if the physicalRootPath does not exists. Add CORS support to SS Blazor apps require that Cross Browser Scripting Requests be allowed. SS makes it very easy to support CORS, by including the following lines in the ConsoleApp's AppHost.cs Configure method: Plugins.Add(new CorsFeature( allowedMethods: \"GET, POST, PUT, DELETE, OPTIONS\", allowedOrigins: \"*\", allowCredentials: true, allowedHeaders: \"content-type, Authorization, Accept\")); This is all that's required for SS to serve a Blazor application! The ServiceStack ConsoleApp program The REST endpoints SS provides the infrastructure to handle REST endpoints as well as serve the static files. Both are supported in the same SS application. Example 1 has two endpoints, whose Routes are; /Initialization and /PostData . Each Route has two Data Transfer Objects (DTOs), one DTO for the route's Request and one for the route's Response. Each endpoint is handled by a SS service. The SS Services that handle the endpoints SS places the code that responds to a Request, and creates the Response, in methods that are part of a class that inherits from SS's Service class. There is a ton of documentation on the web about SS, and its (very feature rich) Service class. Example 1 uses just the most basic of these features. The actions that the Service takes for each endpoint are defined in the AppHost.cs file, in a class there called BaseServices and the two methods therein. One method signature indicates the method should be called for a POST to the /Initialization route, the other method's signature indicates it should be called for a POST on the /PostData route. These methods require the DTO classes for their respective request and response. TargetFramework For Example 1, the TargetFramework for the ConsoleApp is the full .Net, Version 4.7.1 in this case. The DTOs project Example 1 (and SS-served Blazor apps in general) will use a separate project to create a separate assembly that holds just the definitions of the DTOs. This project is referenced by both the Blazor GUI project and the ConsoleHost project. It ensure that both projects have the same definition of the data being transferred between them. The DTO project has just one .cs file in it, CommonDTOs.cs, with all of the DTO class definition in that file. DTOs for Initialization Route Both the request and response DTOs for /Initialization are empty classes. There is no data transferred in the /Initialization request or in its response, making this the simplest kind of Request/Response pair. DTOs for PostData Route Both the request and response DTOs for /PostData have a single Property, of type string , which I've chosen to call StringDataObject . Both the request and the response will carry a payload consisting of just this one value. TargetFrameworks For Example 1, the CommonDTOs assembly has to link to both the ConsoleApp .exe and with the Blazor GUI assemblies. So the CommonDTOs project specifies a <TargetFrameworks> of both net471 and netstandard2.0. Note the plural form of <TargetFrameworks> used here. This produces two copies of the assembly. The other two projects reference the CommonDTOs project, and each picks up their corresponding framework-specific assembly from this project's framework-specific <OutputDir>. GUI Blazor app The GUI app has two pages and a Nav component to move between them. It is very closely based on the \"first Blazor app\" example produced by the Blazor team. This example is explained here:( https://blazor.net/docs/tutorials/build-your-first-blazor-app.html ) Index.cshtml This is the home page of the app, and simply has some welcome text. BasicRESTServices.cshtml This is the presentation page of the app that demonstrates calling into the ConsoleHost's two routes. When the page is loaded, it calls the /Initialization route. For the /PostData route, enter some string into the top input field, and press the submit button. It will be POSTed to the ConsoleApp, which will copy the payload from the request and put it into the response, and return it to the GUI app, where it will be displayed in the bottom field. BasicRESTServices.cshtml.cs This is the codebehind page of the app that supplies the C# code referenced by the BasicRESTServices.cshtml presentation page. TargetFramework Like all Blazor client-side apps, the TargetFramework for the GUI app is .Net Standard 2.0 (currently). Conclusion If you are interested in using Blazor in architecture solutions that don't allow for a web server, I hope these demos help you understand one such approach that uses ServiceStack instead of a web server. if you find errors in the code or this documentation please create a issue in the GitHub repository. Enjoy! Extras Starting the Monitoring tools Start Fiddler, ensure it is listening to all processes. There will be a lot of cruft in the window, hundreds of request/response pairs from all the browser windows you probably have open on your development computer. It takes a while working with Fiddler to setup filters that eliminate all the other HTTP traffic coming and going in your computer, until you can see just the Blazor and ServiceStack traffic. Start Sentinel, and go through its startup screens to setup the UDP listener, which will be listening for logging messages broadcast to its default listening port. This would also be a good time to inspect the NLog.config file in the example. You will see that it sends all messages from any class to two loggers, the Console logger (for the ConsoleApp's console window), and to the UDP logger as well. So for this example, the Sentinel logging program is not 100% necessary, but it will be necessary later, when ServiceStack is running in a mode that has no console (called headless mode). Getting it setup and running also makes development much easier, as the log message don't all disappear as soon as the program stops. launchSettings.json If you would like to save some keystrokes, VS can be configured to start your browser and navigate to a URL when your press F5. This is controlled by the launchSettings.json file. In this example, the launchSettings.json file is found under the Properties subfolder of the ConsoleApp's subfolder. Another launchSettings.json file is found under the Properties subfolder of the GU's subfolder. Settings launchBrowser to true and launchUrl to http://localhost:21200 should make this happen. (TBD, this is documented in Microsoft as working for .Net Core Web applications, and it works for one of my non-Core SS Blazor apps (ACE), but I've not yet isolated the settings needed to make it work for these Blazor demos. As of now, Publishing the GUI application causes a new browser tab to appear, but starting the ConsoleApp does not.)"
  },
  "index.html": {
    "href": "index.html",
    "title": "Blazor Examples Documentation Site Root Home Page | Blazor Examples with ServiceStack",
    "keywords": "Blazor Examples Documentation Site Root Home Page You should be redirected to this repository's ReadMe.html page. If it doesn't happen automatically, please click on the link ReadMe.html"
  },
  "Demos/Demo05/GUI/Documentation/Details.html": {
    "href": "Demos/Demo05/GUI/Documentation/Details.html",
    "title": "Demo05 GUI Documentation | Blazor Examples with ServiceStack",
    "keywords": "Demo05 GUI Documentation Demo05 Adds"
  },
  "Demos/Demo04/ConsoleApp/ReadMe.html": {
    "href": "Demos/Demo04/ConsoleApp/ReadMe.html",
    "title": "ReadMe for Demo04 ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "ReadMe for Demo04 ConsoleApp Documentation for the ConsoleApp used in Demo04 can be found here: Demo04 ConsoleApp Documentation"
  },
  "Demos/Demo03/GUI/Documentation/Details.html": {
    "href": "Demos/Demo03/GUI/Documentation/Details.html",
    "title": "GUI QuickStart Demo03 | Blazor Examples with ServiceStack",
    "keywords": "GUI QuickStart Demo03"
  },
  "Demos/Demo04/CommonDTOs/Documentation/Details.html": {
    "href": "Demos/Demo04/CommonDTOs/Documentation/Details.html",
    "title": "Common Data Transfer Objects (DTOs) Project/Assembly | Blazor Examples with ServiceStack",
    "keywords": "Common Data Transfer Objects (DTOs) Project/Assembly Demo04 (and SS-served Blazor apps in general) uses a separate project to create a separate assembly that holds just the definitions of the DTOs. This project is referenced by both the Blazor GUI project and the ConsoleHost project. It ensure that both projects have the same definition of the data being transferred between them. The CommonDTOs project has just one .cs file in it, CommonDTOs.cs, with all of the DTO class definition in that file. DTOs for the /Initialization Route Both the request and response DTOs for /Initialization are empty classes. There is no data transferred in the /Initialization request or in its response, making this the simplest kind of request/response pair. DTOs for the /PostData Route Both the request and response DTOs for /PostData have a single property, of type string , which I've chosen to call StringDataObject . Both the request and the response will carry a payload consisting of just this one value. TargetFrameworks For all demos, the CommonDTOs assembly will need to link to both the ConsoleApp.exe and with the Blazor GUI assemblies. So the CommonDTOs project specifies a <TargetFrameworks> of both net471 and netstandard2.0. Note the plural form of <TargetFrameworks> used here. This produces two copies of the assembly. The other two projects each reference the CommonDTOs project, and each picks up their corresponding framework-specific assembly from this project's framework-specific <OutputDir> ."
  },
  "Demos/Demo04/CommonDTOs/ReadMe.html": {
    "href": "Demos/Demo04/CommonDTOs/ReadMe.html",
    "title": "Readme Demo04 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Readme Demo04 CommonDTOs Documentation for the CommonDTOs used in Demo04 can be found here: Demo04 CommonDTOs Documentation"
  },
  "SolutionDocumentation/ReadMe.html": {
    "href": "SolutionDocumentation/ReadMe.html",
    "title": "Blazor With ServiceStack Demonstrations ReadMe (at the SolutionDocumentation level) | Blazor Examples with ServiceStack",
    "keywords": "Blazor With ServiceStack Demonstrations ReadMe (at the SolutionDocumentation level) If you are viewing this ReadMe.md in GitHub, here is this same ReadMe on the documentation site Getting Started Refer to the Getting Started Guide to start using the demonstrations. Static Documentation website hosted by GitHub pages The static documentation site has been created with DocFx . It has been organized with information common to all the demos in one section, Repository-wide , and individual demo documentation in a separate section for each demo Demo-Specific . Organization of teh Documentation Building"
  },
  "SolutionDocumentation/GettingStarted.html": {
    "href": "SolutionDocumentation/GettingStarted.html",
    "title": "Getting started with the Blazor - ServiceStack Demos (at the SolutionDocumentation subfolder level) | Blazor Examples with ServiceStack",
    "keywords": "Getting started with the Blazor - ServiceStack Demos (at the SolutionDocumentation subfolder level) If you are viewing this GettingStarted.md in GitHub, here is this same document on the documentation site These are detailed instructions for getting started building, running and extending these demonstrations Documentation organization Details on the documentation and code organization will provide details on how the code for these demos is organized, and details on what documentation is available at each level of the code. Prerequisites A C# / .NET development environment capable of supporting Blazor development The documentation is currently written only for Visual Studio V15.9 (or higher) IDE. Pull requests that expand the documentation to cover the command-line MSBuild environment or other IDEs would be most welcome! The specific instructions to extend the VS IDE to build Blazor apps are in the Get started with Blazor documentation, so head over there and make sure you have the necessary .Net Core 2.1 SDK and then install the Blazor bits optional 3rd-party extensions and tools is a link to instructions on some specific 3rd party tools that make it easier to debug these demos, or see what's going on under the hood a. Fiddler - to see what is being sent between the Blazor app and the ServiceStack Host b. Sentinel - a logging target that listens on a UDP port and displays log messages c. Structured Build Log Viewer - a viewer to see details of how MSBuild is building the assemblies. Getting the Demo projects This repository is not yet sophisticated enough to create a zip with binaries and be able to safely secure and deliver that. Besides, building these demos from source is probably the best way to understand what's going on. Your current choices are to fork or clone this repository. GitHub has a nice explanation of the differences, as well as [detailed instructions on how to fork or clone](https://github.community/t5/Support-Protips/The-difference-between-forking-and-cloning-a-repository/ba-p/1372). Start by forking or cloning your own copy the repository, and then and attach your Visual Studio Source Code Control provider to the fork. Building the Demo projects There is documentation that goes into details for building the demos here . Below is a high-level description of what needs to be done. Open the top level .sln file with Visual Studio Tell Visual Studio to not build the documentation project ATAP.Utilities.AutoDoc , as it will take quite a bit of time, and is not needed to run the demos. How to: Exclude projects from a build Build the entire solution in the Debug configuration. Go into each individual Demo, and \"Publish\" the GUI. Start the SS Console App Open a browser and navigate to http://localhost:21200 as this is the default address and port that the ConsoleApp will be listening on.. Running each Demo project Each demo tries to make a short, focused point. In the GUI, this means only a very few pages with which to interact. The individual demo's documentation should make it clear how to interact with each page and what to expect. Contributing Pull requests for collaborating on and extending these demonstrations are most welcome! Please see the the Contributing guidelines for further details. Contributing to the documentation for these examples is welcome as well. There is no written documentation on how to accomplish that yet, but please refer to the incredibly well written document Contributing to the Blazor documentation for ideas. Our Folder Structure conventions differ from the examples in that document. Attribution The maintainers and contributors to this repository feel it is important to credit the individuals and organizations who have taken their time to publish ideas and guides. We have two documents that try to provide credit where it is due: Attribution for guides and articles related to Blazor and ServiceStack Attribution for guides and articles related to the Utility assemblies, related to DocFx, and related to design, building, and debugging code in general"
  },
  "Demos/Demo04/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo04/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo03/CommonDTOs/ReadMe.html": {
    "href": "Demos/Demo03/CommonDTOs/ReadMe.html",
    "title": "ReadMe Demo03 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "ReadMe Demo03 CommonDTOs If you are viewing this ReadMe.md in GitHub, here is this same ReadMe on the documentation site Documentation for the CommonDTOs used in Demo03 can be found here: Demo03 CommonDTOs Documentation"
  },
  "ApiDocumentation/net471/CommonDTOs.ComplexDataRspDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.ComplexDataRspDTO.html",
    "title": "Class ComplexDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataRspDTO Inheritance System.Object ComplexDataRspDTO Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataRspDTO Constructors ComplexDataRspDTO() Declaration public ComplexDataRspDTO() ComplexDataRspDTO(ComplexData) Declaration public ComplexDataRspDTO(ComplexData complexData) Parameters Type Name Description ComplexData complexData Properties ComplexData Declaration public ComplexData ComplexData { get; set; } Property Value Type Description ComplexData"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.RspComplexDataDictionaryAsStringDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.RspComplexDataDictionaryAsStringDTO.html",
    "title": "Class RspComplexDataDictionaryAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class RspComplexDataDictionaryAsStringDTO Inheritance System.Object RspComplexDataDictionaryAsStringDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class RspComplexDataDictionaryAsStringDTO : object Properties ComplexDataDictionaryAsString Declaration public string ComplexDataDictionaryAsString { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.PostDataRspDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.PostDataRspDTO.html",
    "title": "Class PostDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataRspDTO Inheritance System.Object PostDataRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataRspDTO : object Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/net471/CommonDTOs.ComplexData.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.ComplexData.html",
    "title": "Class ComplexData | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexData Inheritance System.Object ComplexData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexData Properties DateTimeData Declaration public DateTime DateTimeData { get; set; } Property Value Type Description System.DateTime DecimalData Declaration public decimal DecimalData { get; set; } Property Value Type Description System.Decimal DoubleData Declaration public double DoubleData { get; set; } Property Value Type Description System.Double IntData Declaration public int IntData { get; set; } Property Value Type Description System.Int32 StringData Declaration public string StringData { get; set; } Property Value Type Description System.String TimeSpanData Declaration public TimeSpan TimeSpanData { get; set; } Property Value Type Description System.TimeSpan"
  },
  "ApiDocumentation/netstandard2.0/ConsoleApp.AppHost.html": {
    "href": "ApiDocumentation/netstandard2.0/ConsoleApp.AppHost.html",
    "title": "Class AppHost | Blazor Examples with ServiceStack",
    "keywords": "Class AppHost Inheritance System.Object AppHost Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class AppHost : AppSelfHostBase Constructors AppHost() Base constructor requires a Name and Assembly where web service implementation is located Declaration public AppHost() Methods Configure(Container) Declaration public override void Configure(Container container) Parameters Type Name Description Container container Stop() Declaration public override void Stop()"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.InitializationReqDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.InitializationReqDTO.html",
    "title": "Class InitializationReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationReqDTO Inheritance System.Object InitializationReqDTO Implements ServiceStack.IReturn < InitializationRspDTO > ServiceStack.IReturn Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationReqDTO : object, IReturn<InitializationRspDTO>, IReturn Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.ReqComplexDataDictionaryAsStringDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.ReqComplexDataDictionaryAsStringDTO.html",
    "title": "Class ReqComplexDataDictionaryAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ReqComplexDataDictionaryAsStringDTO Inheritance System.Object ReqComplexDataDictionaryAsStringDTO Implements ServiceStack.IReturn < RspComplexDataDictionaryAsStringDTO > ServiceStack.IReturn Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ReqComplexDataDictionaryAsStringDTO : object, IReturn<RspComplexDataDictionaryAsStringDTO>, IReturn Properties ComplexDataDictionaryAsString Declaration public string ComplexDataDictionaryAsString { get; set; } Property Value Type Description System.String Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.PostDataReqDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.PostDataReqDTO.html",
    "title": "Class PostDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataReqDTO Inheritance System.Object PostDataReqDTO Implements ServiceStack.IReturn < PostDataRspDTO > ServiceStack.IReturn Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataReqDTO : object, IReturn<PostDataRspDTO>, IReturn Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.RspComplexDataAsStringDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.RspComplexDataAsStringDTO.html",
    "title": "Class RspComplexDataAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class RspComplexDataAsStringDTO Inheritance System.Object RspComplexDataAsStringDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class RspComplexDataAsStringDTO : object Properties ComplexDataAsString Declaration public string ComplexDataAsString { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.InitializationRspDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.InitializationRspDTO.html",
    "title": "Class InitializationRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationRspDTO Inheritance System.Object InitializationRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationRspDTO : object"
  },
  "ApiDocumentation/net471/CommonDTOs.ComplexDataDictionaryReqDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.ComplexDataDictionaryReqDTO.html",
    "title": "Class ComplexDataDictionaryReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionaryReqDTO Inheritance System.Object ComplexDataDictionaryReqDTO Implements ServiceStack.IReturn < ComplexDataDictionaryRspDTO > ServiceStack.IReturn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/PostComplexDataDictionary\")] public class ComplexDataDictionaryReqDTO : IReturn<ComplexDataDictionaryRspDTO>, IReturn Constructors ComplexDataDictionaryReqDTO() Declaration public ComplexDataDictionaryReqDTO() ComplexDataDictionaryReqDTO(ComplexDataDictionary) Declaration public ComplexDataDictionaryReqDTO(ComplexDataDictionary complexDataDictionary) Parameters Type Name Description ComplexDataDictionary complexDataDictionary Properties ComplexDataDictionary Declaration public ComplexDataDictionary ComplexDataDictionary { get; set; } Property Value Type Description ComplexDataDictionary Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netstandard2.0/ConsoleApp.html": {
    "href": "ApiDocumentation/netstandard2.0/ConsoleApp.html",
    "title": "Namespace ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "Namespace ConsoleApp Classes AppHost BaseServices"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.PostDataReqDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.PostDataReqDTO.html",
    "title": "Class PostDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataReqDTO Inheritance System.Object PostDataReqDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataReqDTO : IReturn<PostDataRspDTO> Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataRspDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataRspDTO.html",
    "title": "Class ComplexDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataRspDTO Inheritance System.Object ComplexDataRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataRspDTO : object Constructors ComplexDataRspDTO() Declaration public ComplexDataRspDTO() ComplexDataRspDTO(ComplexData) Declaration public ComplexDataRspDTO(ComplexData complexData) Parameters Type Name Description ComplexData complexData Properties ComplexData Declaration public ComplexData ComplexData { get; set; } Property Value Type Description ComplexData"
  },
  "ApiDocumentation/net471/ConsoleApp.BaseServices.html": {
    "href": "ApiDocumentation/net471/ConsoleApp.BaseServices.html",
    "title": "Class BaseServices | Blazor Examples with ServiceStack",
    "keywords": "Class BaseServices Inheritance System.Object ServiceStack.Service BaseServices Implements ServiceStack.IService ServiceStack.IServiceBase ServiceStack.Web.IRequiresRequest ServiceStack.Configuration.IResolver System.IDisposable ServiceStack.IServiceFilters ServiceStack.IServiceBeforeFilter ServiceStack.IServiceAfterFilter ServiceStack.IServiceErrorFilter Inherited Members ServiceStack.Service.GetResolver() ServiceStack.Service.SetResolver(ServiceStack.Configuration.IResolver) ServiceStack.Service.TryResolve<T>() ServiceStack.Service.ResolveService<T>() ServiceStack.Service.GetSession(System.Boolean) ServiceStack.Service.SessionAs<TUserSession>() ServiceStack.Service.PublishMessage<T>(T) ServiceStack.Service.Dispose() ServiceStack.Service.OnBeforeExecute(System.Object) ServiceStack.Service.OnAfterExecute(System.Object) ServiceStack.Service.OnExceptionAsync(System.Object, System.Exception) ServiceStack.Service.GlobalResolver ServiceStack.Service.Request ServiceStack.Service.Response ServiceStack.Service.Cache ServiceStack.Service.LocalCache ServiceStack.Service.Db ServiceStack.Service.Redis ServiceStack.Service.MessageProducer ServiceStack.Service.SessionFactory ServiceStack.Service.AuthRepository ServiceStack.Service.Gateway ServiceStack.Service.VirtualFileSources ServiceStack.Service.VirtualFiles ServiceStack.Service.SessionBag ServiceStack.Service.IsAuthenticated System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class BaseServices : Service, IService, IServiceBase, IRequiresRequest, IResolver, IDisposable, IServiceFilters, IServiceBeforeFilter, IServiceAfterFilter, IServiceErrorFilter Methods Post(InitializationReqDTO) Declaration public object Post(InitializationReqDTO request) Parameters Type Name Description InitializationReqDTO request Returns Type Description System.Object Post(PostDataReqDTO) Declaration public object Post(PostDataReqDTO request) Parameters Type Name Description PostDataReqDTO request Returns Type Description System.Object Implements ServiceStack.IService ServiceStack.IServiceBase ServiceStack.Web.IRequiresRequest ServiceStack.Configuration.IResolver System.IDisposable ServiceStack.IServiceFilters ServiceStack.IServiceBeforeFilter ServiceStack.IServiceAfterFilter ServiceStack.IServiceErrorFilter"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataDictionaryReqDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataDictionaryReqDTO.html",
    "title": "Class ComplexDataDictionaryReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionaryReqDTO Inheritance System.Object ComplexDataDictionaryReqDTO Implements ServiceStack.IReturn < ComplexDataDictionaryRspDTO > ServiceStack.IReturn Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataDictionaryReqDTO : object, IReturn<ComplexDataDictionaryRspDTO>, IReturn Constructors ComplexDataDictionaryReqDTO() Declaration public ComplexDataDictionaryReqDTO() ComplexDataDictionaryReqDTO(ComplexDataDictionary) Declaration public ComplexDataDictionaryReqDTO(ComplexDataDictionary complexDataDictionary) Parameters Type Name Description ComplexDataDictionary complexDataDictionary Properties ComplexDataDictionary Declaration public ComplexDataDictionary ComplexDataDictionary { get; set; } Property Value Type Description ComplexDataDictionary Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "Demos/Demo03/GUI/ReadMe.html": {
    "href": "Demos/Demo03/GUI/ReadMe.html",
    "title": "GUI ReadMe Demo03 | Blazor Examples with ServiceStack",
    "keywords": "GUI ReadMe Demo03"
  },
  "Demos/Demo03/Documentation/Overview.html": {
    "href": "Demos/Demo03/Documentation/Overview.html",
    "title": "Overview of Demo03 | Blazor Examples with ServiceStack",
    "keywords": "Overview of Demo03 The purpose of Demo03 is to Provide theh same features as Demo01, but to use the ServiceStack HttpClient-based JsonHttpClient instead of teh Blazor-provided HttpClient. Demo03, like Demo01,show the near minimal code needed to deliver the Blazor GUI, and provide two simple REST endpoints that can communicate with the Blazor GUI. ConsoleApp The ConsoleApp program creates an instance of a ServiceStack AppSelfHostBase , initializes it, and starts it listening. The ConsoleApp responds on two specific URLs (the routes), and responds with the index.html when any unknown route is sent.When an request comes for index.html. the page instructs the browser to make many more calls to the ConsoleApp, to fetch the .DLL files, and resource files, needed to render the GUI. The Blazor GUI The GUI is comprised of a home page and a second page with an input field, a button, and a place to show the results of an API call. The home page is index.html, and contains instructions on what to download from the ConsoleApp. The CommonDTOs The CommonDTOs define objects that contain the data fields that will be transmitted between the GUI and the ConsoleApp."
  },
  "Demos/Demo05/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo05/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo03/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo03/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo02/ConsoleApp/Documentation/Details.html": {
    "href": "Demos/Demo02/ConsoleApp/Documentation/Details.html",
    "title": "The ServiceStack (SS) ConsoleApp.exe Project/program | Blazor Examples with ServiceStack",
    "keywords": "The ServiceStack (SS) ConsoleApp.exe Project/program A simple Console program the implements the ServiceStack console host for two endpoints, plus the sauce needed to make ServiceStack deliver the static files that make up the GUI. The REST endpoints SS provides the infrastructure to handle REST endpoints as well as serve the static files. Both are supported in the same SS application. Demo01 has two endpoints, whose Routes are; /Initialization and /PostData . Each Route has two Data Transfer Objects (DTOs), one DTO for the route's Request and one for the route's Response. Each endpoint is handled by a SS service. The SS Services that handle the endpoints SS places the code that responds to a Request, and creates the Response, in methods that are part of a class that inherits from SS's Service class. There is a ton of documentation on the web about SS, and its (very feature rich) Service class. Demo01 uses just the most basic of these features. In Demo01, the actions that the Service takes for each endpoint are defined in the AppHost.cs file, in a class there called BaseServices and the two methods therein. One method signature indicates the method should be called for a POST to the /Initialization Route, the other method's signature indicates it should be called for a POST on the /PostData Route. These methods signatures specify the DTO classes for their respective Request and Response. TargetFramework For Demo01, the TargetFramework for the ConsoleApp.exe program is the full .Net, Version 4.7.1 in this case. How to make ServiceStack deliver the Blazor app You will need to start with version 5.4.1 or higher, because ServiceStack developers added some allowed file types to this version to make it work better. The following discussion applies to the code found in AppHost.cs . Allow the delivery of .json files Blazor requires the static file server to deliver a file named blazor.boot.json from the _frameworks subfolder. By default, delivery of .json files are not allowed. In the AppHost.cs file, this line instructs SS to allow the .json suffix. this.Config.AllowFileExtensions.Add(\"json\"); Change the default redirect path Blazor routing requires that when the static file server sees a request made to a URL that does not match a known route, that the server return the contents of index.html. In the AppHost.cs file, this line instructs SS to do that. this.Config.DefaultRedirectPath = \"/index.html\"; Map a virtual path to the location of the files to serve Being able to tell the ConsoleApp where the static files are located is a key requirement.You could use an absolute location, but that would not be very portable. Using a path relative to the location of the executing assembly is more portable. But how to specify that? The answer typically depends on the lifecycle stage of the application. In production, staging, and QA stages, there will be an 'AsInstalled' architecture, and the relationship of the static files to the production .exe will be known. In development under VS, the relationship of the location of static files to the location of the exe being developed, is a bit complicated. A more sophisticated example will use SS AppSettings to create a Configuration setting value that can be controlled by a settings file. But this example will simply use a string constant. In the AppHost.cs file, this line, the var physicalRootPath , specifies the relative location of the ConsoleApp's .exe file to the Blazor app's static files. var physicalRootPath = \"../../../../GUI/bin/Debug/netstandard2.0/Publish/GUI/dist\"; Details on the physicalRootPath value. The value of physicalRootPath shown here is specific to the way VS uses MSBuild, and to the way the GUI's Publish action uses the DebugFolderProfile . GUI project Publish action Under the GUI project's Properties subfolder is the file DebugFolderProfile.pubxml . This file has the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl>. I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir>. Since the <publishUrl> is relative to the <ProjectDir>, I hardcoded the path I wanted (<OutputDir> for Debug and netstandard2.0), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. ConsoleApp's .EXE's location after build By default VS puts the compile/link artifacts of the ConsoleApp under it's project's MSBuild <OutputDir>, which defaults to the ./bin/<Config>/<framework> subfolder relative to the <ProjectDir>. Under VS debugging of the ConsoleApp, VS starts the .exe in that same <OutputDir>. Relative location of the GUI's static content to ConsoleApp's .exe location So to map from the ConsoleApp's .exe startup directory to the GUI's static content files, the physicalRootPath value consist of: The four ../../.././ patterns maps to the MSBuild <SolutionDir> top-level folder, just above each <ProjectDir>. The <SolutionDir> is the root folder common to both the ConsoleApp project's subfolder tree and the GUI project's subfolder tree. From that common folder, the GUI app's static files are down the path <ProjectDir> (GUI), then the location specified in the DebugFolderProfile.pubxml, ( bin/<Config>/<Framework>/Publish ) and then /GUI/dist as created by the Publish operation. Putting it all together, the ConsoleApp knows where the GUI app's static files are by going up the ConsoleApp project's directory tree to the <SolutionDir>, then down the path to the GUI project's $<ProjectDir> and then down into the bin/<Config>/<Framework>/Publish/ specified by <publishUrl> in DebugFolderProfile.pubxml , then down to the subfolder GUI/dist created by the Publish operation. Again to reiterate, the solution above is very specific to the way VS and MSBuild works, and that specific convoluted physicalRootPath is specific to the way the example project structure was organized. In production or other scenarios, the var physicalRootPath would have a different value.. Details on the virtualRootPath In the first example, the GUI uses an empty virtual path root. In the AppHost.cs file, this line, the var virtualRootPath , specifies the virtual path to the GUI Blazor app's static files. Using an empty path for the virtual path means, for this example, that Index.html is found at ( http://localhost:21200/Index.html ). var virtualRootPath = \"\"; Later examples (hopefully) will show that non-empty values will let SS support multiple Blazor GUIs side-by-side, by aligning different virtualRootPath values with different physicalRootPath values, and modifying each Blazor GUI project's base URL routing slightly. Map it In the ConsoleApp's AppHost.cs Configure method, the following line tells SS to add a new location from which to serve static files that do not match a known SS route. this.AddVirtualFileSources.Add(new FileSystemMapping(virtualRootPath, physicalRootPath)); It appears wrapped in a try-catch block, to catch an exception if the physicalRootPath does not exists. Add CORS support to SS Blazor apps require that Cross Browser Scripting Requests be allowed. SS makes it very easy to support CORS, by including the following lines in the ConsoleApp's AppHost.cs Configure method: Plugins.Add(new CorsFeature( allowedMethods: \"GET, POST, PUT, DELETE, OPTIONS\", allowedOrigins: \"*\", allowCredentials: true, allowedHeaders: \"content-type, Authorization, Accept\")); This is all that's required for SS to serve a Blazor application! Demo02 extends the console app with the integration of the ServiceStack serializers."
  },
  "Demos/Demo02/CommonDTOs/ReadMe.html": {
    "href": "Demos/Demo02/CommonDTOs/ReadMe.html",
    "title": "Readme Demo01 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Readme Demo01 CommonDTOs Documentation for the CommonDTOs used in Demo01 can be found here: Demo01 CommonDTOs Documentation"
  },
  "Demos/Demo01/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo01/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo01/GUI/ReadMe.html": {
    "href": "Demos/Demo01/GUI/ReadMe.html",
    "title": "GUI ReadMe | Blazor Examples with ServiceStack",
    "keywords": "GUI ReadMe"
  },
  "Demos/Demo01/Documentation/Overview.html": {
    "href": "Demos/Demo01/Documentation/Overview.html",
    "title": "Overview of Demo01 | Blazor Examples with ServiceStack",
    "keywords": "Overview of Demo01 The purpose of Demo01 is to show the near minimal code needed to deliver the Blazor GUI, and provide two simple REST endpoints that can communicate with the Blazor GUI. ConsoleApp The ConsoleApp program creates an instance of a ServiceStack AppSelfHostBase , initializes it, and starts it listening. The ConsoleApp responds on two specific URLs (the routes), and responds with the index.html when any unknown route is sent.When an request comes for index.html. the page instructs the browser to make many more calls to the ConsoleApp, to fetch the .DLL files, and resource files, needed to render the GUI. The Blazor GUI The GUI is comprised of a home page and a second page with an input field, a button, and a place to show the results of an API call. The home page is index.html, and contains instructions on what to download from the ConsoleApp. The CommonDTOs The CommonDTOs define objects that contain the data fields that will be transmitted between the GUI and the ConsoleApp."
  },
  "Demos/Demo01/ConsoleApp/Documentation/Details.html": {
    "href": "Demos/Demo01/ConsoleApp/Documentation/Details.html",
    "title": "The ServiceStack (SS) ConsoleApp.exe Project/program | Blazor Examples with ServiceStack",
    "keywords": "The ServiceStack (SS) ConsoleApp.exe Project/program A simple Console program the implements the ServiceStack console host for two endpoints, plus the sauce needed to make ServiceStack deliver the static files that make up the GUI. The REST endpoints SS provides the infrastructure to handle REST endpoints as well as serve the static files. Both are supported in the same SS application. Demo01 has two endpoints, whose Routes are; /Initialization and /PostData . Each Route has two Data Transfer Objects (DTOs), one DTO for the route's Request and one for the route's Response. Each endpoint is handled by a SS service. The SS Services that handle the endpoints SS places the code that responds to a Request, and creates the Response, in methods that are part of a class that inherits from SS's Service class. There is a ton of documentation on the web about SS, and its (very feature rich) Service class. Demo01 uses just the most basic of these features. In Demo01, the actions that the Service takes for each endpoint are defined in the AppHost.cs file, in a class there called BaseServices and the two methods therein. One method signature indicates the method should be called for a POST to the /Initialization Route, the other method's signature indicates it should be called for a POST on the /PostData Route. These methods signatures specify the DTO classes for their respective Request and Response. TargetFramework For Demo01, the TargetFramework for the ConsoleApp.exe program is the full .Net, Version 4.7.1 in this case. How to make ServiceStack deliver the Blazor app You will need to start with version 5.4.1 or higher, because ServiceStack developers added some allowed file types to this version to make it work better. The following discussion applies to the code found in AppHost.cs . Allow the delivery of .json files Blazor requires the static file server to deliver a file named blazor.boot.json from the _frameworks subfolder. By default, delivery of .json files are not allowed. In the AppHost.cs file, this line instructs SS to allow the .json suffix. this.Config.AllowFileExtensions.Add(\"json\"); Change the default redirect path Blazor routing requires that when the static file server sees a request made to a URL that does not match a known route, that the server return the contents of index.html. In the AppHost.cs file, this line instructs SS to do that. this.Config.DefaultRedirectPath = \"/index.html\"; Map a virtual path to the location of the files to serve Being able to tell the ConsoleApp where the static files are located is a key requirement.You could use an absolute location, but that would not be very portable. Using a path relative to the location of the executing assembly is more portable. But how to specify that? The answer typically depends on the lifecycle stage of the application. In production, staging, and QA stages, there will be an 'AsInstalled' architecture, and the relationship of the static files to the production .exe will be known. In development under VS, the relationship of the location of static files to the location of the exe being developed, is a bit complicated. A more sophisticated example will use SS AppSettings to create a Configuration setting value that can be controlled by a settings file. But this example will simply use a string constant. In the AppHost.cs file, this line, the var physicalRootPath , specifies the relative location of the ConsoleApp's .exe file to the Blazor app's static files. var physicalRootPath = \"../../../../GUI/bin/Debug/netstandard2.0/Publish/GUI/dist\"; Details on the physicalRootPath value. The value of physicalRootPath shown here is specific to the way VS uses MSBuild, and to the way the GUI's Publish action uses the DebugFolderProfile . GUI project Publish action Under the GUI project's Properties subfolder is the file DebugFolderProfile.pubxml . This file has the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl>. I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir>. Since the <publishUrl> is relative to the <ProjectDir>, I hardcoded the path I wanted (<OutputDir> for Debug and netstandard2.0), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. ConsoleApp's .EXE's location after build By default VS puts the compile/link artifacts of the ConsoleApp under it's project's MSBuild <OutputDir>, which defaults to the ./bin/<Config>/<framework> subfolder relative to the <ProjectDir>. Under VS debugging of the ConsoleApp, VS starts the .exe in that same <OutputDir>. Relative location of the GUI's static content to ConsoleApp's .exe location So to map from the ConsoleApp's .exe startup directory to the GUI's static content files, the physicalRootPath value consist of: The four ../../.././ patterns maps to the MSBuild <SolutionDir> top-level folder, just above each <ProjectDir>. The <SolutionDir> is the root folder common to both the ConsoleApp project's subfolder tree and the GUI project's subfolder tree. From that common folder, the GUI app's static files are down the path <ProjectDir> (GUI), then the location specified in the DebugFolderProfile.pubxml, ( bin/<Config>/<Framework>/Publish ) and then /GUI/dist as created by the Publish operation. Putting it all together, the ConsoleApp knows where the GUI app's static files are by going up the ConsoleApp project's directory tree to the <SolutionDir>, then down the path to the GUI project's $<ProjectDir> and then down into the bin/<Config>/<Framework>/Publish/ specified by <publishUrl> in DebugFolderProfile.pubxml , then down to the subfolder GUI/dist created by the Publish operation. Again to reiterate, the solution above is very specific to the way VS and MSBuild works, and that specific convoluted physicalRootPath is specific to the way the example project structure was organized. In production or other scenarios, the var physicalRootPath would have a different value.. Details on the virtualRootPath In the first example, the GUI uses an empty virtual path root. In the AppHost.cs file, this line, the var virtualRootPath , specifies the virtual path to the GUI Blazor app's static files. Using an empty path for the virtual path means, for this example, that Index.html is found at ( http://localhost:21200/Index.html ). var virtualRootPath = \"\"; Later examples (hopefully) will show that non-empty values will let SS support multiple Blazor GUIs side-by-side, by aligning different virtualRootPath values with different physicalRootPath values, and modifying each Blazor GUI project's base URL routing slightly. Map it In the ConsoleApp's AppHost.cs Configure method, the following line tells SS to add a new location from which to serve static files that do not match a known SS route. this.AddVirtualFileSources.Add(new FileSystemMapping(virtualRootPath, physicalRootPath)); It appears wrapped in a try-catch block, to catch an exception if the physicalRootPath does not exists. Add CORS support to SS Blazor apps require that Cross Browser Scripting Requests be allowed. SS makes it very easy to support CORS, by including the following lines in the ConsoleApp's AppHost.cs Configure method: Plugins.Add(new CorsFeature( allowedMethods: \"GET, POST, PUT, DELETE, OPTIONS\", allowedOrigins: \"*\", allowCredentials: true, allowedHeaders: \"content-type, Authorization, Accept\")); This is all that's required for SS to serve a Blazor application!"
  },
  "Demos/Demo05/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo05/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo05/ConsoleApp/Documentation/Details.html": {
    "href": "Demos/Demo05/ConsoleApp/Documentation/Details.html",
    "title": "The ServiceStack (SS) ConsoleApp.exe Project/program | Blazor Examples with ServiceStack",
    "keywords": "The ServiceStack (SS) ConsoleApp.exe Project/program A simple Console program the implements the ServiceStack console host for two endpoints, plus the sauce needed to make ServiceStack deliver the static files that make up the GUI. The REST endpoints SS provides the infrastructure to handle REST endpoints as well as serve the static files. Both are supported in the same SS application. Demo01 has two endpoints, whose Routes are; /Initialization and /PostData . Each Route has two Data Transfer Objects (DTOs), one DTO for the route's Request and one for the route's Response. Each endpoint is handled by a SS service. The SS Services that handle the endpoints SS places the code that responds to a Request, and creates the Response, in methods that are part of a class that inherits from SS's Service class. There is a ton of documentation on the web about SS, and its (very feature rich) Service class. Demo01 uses just the most basic of these features. In Demo01, the actions that the Service takes for each endpoint are defined in the AppHost.cs file, in a class there called BaseServices and the two methods therein. One method signature indicates the method should be called for a POST to the /Initialization Route, the other method's signature indicates it should be called for a POST on the /PostData Route. These methods signatures specify the DTO classes for their respective Request and Response. TargetFramework For Demo05, the TargetFramework for the ConsoleApp.exe program is the full .Net, Version 4.7.1 in this case. How to make ServiceStack deliver the Blazor app You will need to start with version 5.5 or higher, because ServiceStack developers added some allowed file types to this version to make it work better. The following discussion applies to the code found in AppHost.cs . Allow the delivery of .json files Blazor requires the static file server to deliver a file named blazor.boot.json from the _frameworks subfolder. By default, delivery of .json files are not allowed. In the AppHost.cs file, this line instructs SS to allow the .json suffix. this.Config.AllowFileExtensions.Add(\"json\"); Change the default redirect path Blazor routing requires that when the static file server sees a request made to a URL that does not match a known route, that the server return the contents of index.html. In the AppHost.cs file, this line instructs SS to do that. this.Config.DefaultRedirectPath = \"/index.html\"; Map a virtual path to the location of the files to serve Being able to tell the ConsoleApp where the static files are located is a key requirement.You could use an absolute location, but that would not be very portable. Using a path relative to the location of the executing assembly is more portable. But how to specify that? The answer typically depends on the lifecycle stage of the application. In production, staging, and QA stages, there will be an 'AsInstalled' architecture, and the relationship of the static files to the production .exe will be known. In development under VS, the relationship of the location of static files to the location of the exe being developed, is a bit complicated. A more sophisticated example will use SS AppSettings to create a Configuration setting value that can be controlled by a settings file. But this example will simply use a string constant. In the AppHost.cs file, this line, the var physicalRootPath , specifies the relative location of the ConsoleApp's .exe file to the Blazor app's static files. var physicalRootPath = \"../../../../GUI/bin/Debug/netstandard2.0/Publish/GUI/dist\"; Details on the physicalRootPath value. The value of physicalRootPath shown here is specific to the way VS uses MSBuild, and to the way the GUI's Publish action uses the DebugFolderProfile . GUI project Publish action Under the GUI project's Properties subfolder is the file DebugFolderProfile.pubxml . This file has the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl>. I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir>. Since the <publishUrl> is relative to the <ProjectDir>, I hardcoded the path I wanted (<OutputDir> for Debug and netstandard2.0), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. ConsoleApp's .EXE's location after build By default VS puts the compile/link artifacts of the ConsoleApp under it's project's MSBuild <OutputDir>, which defaults to the ./bin/<Config>/<framework> subfolder relative to the <ProjectDir>. Under VS debugging of the ConsoleApp, VS starts the .exe in that same <OutputDir>. Relative location of the GUI's static content to ConsoleApp's .exe location So to map from the ConsoleApp's .exe startup directory to the GUI's static content files, the physicalRootPath value consist of: The four ../../.././ patterns maps to the MSBuild <SolutionDir> top-level folder, just above each <ProjectDir>. The <SolutionDir> is the root folder common to both the ConsoleApp project's subfolder tree and the GUI project's subfolder tree. From that common folder, the GUI app's static files are down the path <ProjectDir> (GUI), then the location specified in the DebugFolderProfile.pubxml, ( bin/<Config>/<Framework>/Publish ) and then /GUI/dist as created by the Publish operation. Putting it all together, the ConsoleApp knows where the GUI app's static files are by going up the ConsoleApp project's directory tree to the <SolutionDir>, then down the path to the GUI project's $<ProjectDir> and then down into the bin/<Config>/<Framework>/Publish/ specified by <publishUrl> in DebugFolderProfile.pubxml , then down to the subfolder GUI/dist created by the Publish operation. Again to reiterate, the solution above is very specific to the way VS and MSBuild works, and that specific convoluted physicalRootPath is specific to the way the example project structure was organized. In production or other scenarios, the var physicalRootPath would have a different value.. Details on the virtualRootPath In the first example, the GUI uses an empty virtual path root. In the AppHost.cs file, this line, the var virtualRootPath , specifies the virtual path to the GUI Blazor app's static files. Using an empty path for the virtual path means, for this example, that Index.html is found at ( http://localhost:21200/Index.html ). var virtualRootPath = \"\"; Later examples (hopefully) will show that non-empty values will let SS support multiple Blazor GUIs side-by-side, by aligning different virtualRootPath values with different physicalRootPath values, and modifying each Blazor GUI project's base URL routing slightly. Map it In the ConsoleApp's AppHost.cs Configure method, the following line tells SS to add a new location from which to serve static files that do not match a known SS route. this.AddVirtualFileSources.Add(new FileSystemMapping(virtualRootPath, physicalRootPath)); It appears wrapped in a try-catch block, to catch an exception if the physicalRootPath does not exists. Add CORS support to SS Blazor apps require that Cross Browser Scripting Requests be allowed. SS makes it very easy to support CORS, by including the following lines in the ConsoleApp's AppHost.cs Configure method: Plugins.Add(new CorsFeature( allowedMethods: \"GET, POST, PUT, DELETE, OPTIONS\", allowedOrigins: \"*\", allowCredentials: true, allowedHeaders: \"content-type, Authorization, Accept\")); This is all that's required for SS to serve a Blazor application!"
  },
  "Demos/Demo04/GUI/Documentation/Details.html": {
    "href": "Demos/Demo04/GUI/Documentation/Details.html",
    "title": "Demo04 GUI Documentation | Blazor Examples with ServiceStack",
    "keywords": "Demo04 GUI Documentation Demo04 Adds"
  },
  "Demos/Demo04/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo04/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo01/ReadMe.html": {
    "href": "Demos/Demo01/ReadMe.html",
    "title": "Blazor With ServiceStack Demonstrations Demo01 ReadMe (at the common Demo01 Solution subfolder level) | Blazor Examples with ServiceStack",
    "keywords": "Blazor With ServiceStack Demonstrations Demo01 ReadMe (at the common Demo01 Solution subfolder level) If you are viewing this ReadMe.md in GitHub, here is this same ReadMe on the documentation site This is the specific documentation for Demo01, Blazor GUI served by ServiceStack having two REST endpoints . Introduction This documents the types, pages, and services used by the first demonstration program CommonDTOs The demonstration illustrates two service endpoints. Route Service Name Verb RequestDTO Type Name ResponseDTO type Name /Initialization BaseServices Post InitializationReqDTO InitializationRspDTO Blazor GUI ConsoleApp The first example program is the most basic. The Blazor GUI portion consists of two Razor pages, and code that makes two REST calls to ServiceStack, one REST call with no data payload sent or received, and one that sends a string and receives a string. The ServiceStack application portion consist of a Console program for .Net (full framework) which serves the static files for the Blazor application, and handles the two simple REST service endpoints. The CommonDTOs project defines the data payload sent and received between the ConsoleApp and the Blazor GUI. : [Demo01 Overview](Documentation/Overview.html)"
  },
  "ApiDocumentation/netcoreapp2.0/ConsoleApp.AppHost.html": {
    "href": "ApiDocumentation/netcoreapp2.0/ConsoleApp.AppHost.html",
    "title": "Class AppHost | Blazor Examples with ServiceStack",
    "keywords": "Class AppHost Inheritance System.Object AppHost Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class AppHost : AppSelfHostBase Constructors AppHost() Base constructor requires a Name and Assembly where web service implementation is located Declaration public AppHost() Methods Configure(Container) Declaration public override void Configure(Container container) Parameters Type Name Description Container container Stop() Declaration public override void Stop()"
  },
  "SolutionDocumentation/BuildingNotes.html": {
    "href": "SolutionDocumentation/BuildingNotes.html",
    "title": "Notes on Building the solution | Blazor Examples with ServiceStack",
    "keywords": "Notes on Building the solution If you are viewing this BuildingNotes.md in GitHub, here is this same document on the documentation site Prerequisites Details for the Prerequisites Details for thhe optional 3rd-party tools General Background Build Information In the interest of \"Don't Repeat Yourself (DRY)\" principles, you will find general documentation on the build tools, versioning methodology, Documentation creation, etc, in the ATAP.Utilities repository. 1. Configuring and using the Visual Studio IDE and Visual Studio Team Explorer . 2. GitFlow branch and release strategy used by this repository. 3. Versioning and Packaging used by this repository. 1. Building Documentation general instructions for using DocFx to build documentation for a repository Versioning This repository follows the general guidelines above. Organization Refer to the Organization documentation to pictures of how the solution and filesystem layouts are organized. Build Configuration information at the Solution level The Solution Item solution folder level contains build configuration information that applies to all projects in the solution, as follows: Directory.Build.Props Tells all projects to use the latest C# language features, and that VersionInformation is explicitly defined in each project. Defines common compilation symbols and flags. TargetFrameworks Build Configuration information at the Demoxx level Individual under each Demoxx folder are three projects. To build a working Demo, all three projects must be built, and the GUI project must also be published. Building notes for each project are below Build the ConsoleApp.exe The .csproj should specify <TargetFramework>net471</TargetFramework>. Build the CommonDTO library The .csproj should specify <TargetFrameworks>netstandard2.0;net471</TargetFrameworks>. Note the plural form of the Property. This will ensure that assemblies are built for both target frameworks. Build the GUI The .csproj should specify <TargetFramework>netnetstandard2.0</TargetFramework>. Publish the GUI Publish Profiles There is a DebugFolderProfile and a ReleaseFolderProfile. Both publish to the filesystem. The DebugFolderProfile publishes to a subfolder relative to the GUI project's folder. The ReleaseFolderProfile publishes to a Release subfolder relative to the root of the solution. NuGet Packaging N/A, none of the projects in this solution create NuGet packages NuGet Packages Used * Demo01 and all others * GUI Project * Blazor (all current NuGet packages) * Blazor Logging Extensions * ServiceStack Project * ServiceStack (At least version 5.4.1 or later) * NLog * Demo02 * GUI Project * ServiceStack.Text Visual Studio Extensions to make coding and debugging easier * [Structured Build Logs]() * [Structured Build Log Viewer]() * [DocFx]() 3-rd party tools to make coding and debugging easier * [Sentinal]() UDP Log sink Building under Visual Studio Building with MSBuild from the command line Building and hosting the documentation website with DocFx"
  },
  "Demos/Demo02/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo02/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo02/GUI/ReadMe.html": {
    "href": "Demos/Demo02/GUI/ReadMe.html",
    "title": "GUI ReadMe | Blazor Examples with ServiceStack",
    "keywords": "GUI ReadMe"
  },
  "Demos/Demo02/ConsoleApp/ReadMe.html": {
    "href": "Demos/Demo02/ConsoleApp/ReadMe.html",
    "title": "ReadMe for Demo01 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "ReadMe for Demo01 CommonDTOs"
  },
  "Demos/Demo02/CommonDTOs/Documentation/Details.html": {
    "href": "Demos/Demo02/CommonDTOs/Documentation/Details.html",
    "title": "Common Data Transfer Objects (DTOs) Project/Assembly | Blazor Examples with ServiceStack",
    "keywords": "Common Data Transfer Objects (DTOs) Project/Assembly Demo02 (and SS-served Blazor apps in general) uses a separate project to create a separate assembly that holds just the definitions of the DTOs. This project is referenced by both the Blazor GUI project and the ConsoleHost project. It ensure that both projects have the same definition of the data being transferred between them. The CommonDTOs project has just one .cs file in it, CommonDTOs.cs, with all of the DTO class definition in that file. The CommonDTOs project in Demo02 adds another pair of DTOs that will be used to test the SS serializer. DTOs for the /Initialization Route Both the request and response DTOs for /Initialization are empty classes. There is no data transferred in the /Initialization request or in its response, making this the simplest kind of request/response pair. DTOs for the /PostData Route Both the request and response DTOs for /PostData have a single property, of type string , which I've chosen to call StringDataObject . Both the request and the response will carry a payload consisting of just this one value. DTOs for the /PostComplexData Route Both the request and response DTOs for /PostComplexData have a single property, of type ComplexDTOData , which I've chosen to define as a string, a DateTime, a TimeSpan, an int, a double, and a decimal. Both the request and the response will carry a payload consisting of a dictionary<string,ComplexDTOData>. TargetFrameworks For Demo02, the CommonDTOs assembly will need to link to both the ConsoleApp.exe and with the Blazor GUI assemblies. So the CommonDTOs project specifies a <TargetFrameworks> of both net471 and netstandard2.0. Note the plural form of <TargetFrameworks> used here. This produces two copies of the assembly. The other two projects each reference the CommonDTOs project, and each picks up their corresponding framework-specific assembly from this project's framework-specific <OutputDir> ."
  },
  "Demos/Demo05/ConsoleApp/ReadMe.html": {
    "href": "Demos/Demo05/ConsoleApp/ReadMe.html",
    "title": "ReadMe for Demo05 ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "ReadMe for Demo05 ConsoleApp Documentation for the ConsoleApp used in Demo05 can be found here: Demo05 ConsoleApp Documentation"
  },
  "Demos/Demo04/ConsoleApp/Documentation/Details.html": {
    "href": "Demos/Demo04/ConsoleApp/Documentation/Details.html",
    "title": "The ServiceStack (SS) ConsoleApp.exe Project/program | Blazor Examples with ServiceStack",
    "keywords": "The ServiceStack (SS) ConsoleApp.exe Project/program A simple Console program the implements the ServiceStack console host for two endpoints, plus the sauce needed to make ServiceStack deliver the static files that make up the GUI. The REST endpoints SS provides the infrastructure to handle REST endpoints as well as serve the static files. Both are supported in the same SS application. Demo01 has two endpoints, whose Routes are; /Initialization and /PostData . Each Route has two Data Transfer Objects (DTOs), one DTO for the route's Request and one for the route's Response. Each endpoint is handled by a SS service. The SS Services that handle the endpoints SS places the code that responds to a Request, and creates the Response, in methods that are part of a class that inherits from SS's Service class. There is a ton of documentation on the web about SS, and its (very feature rich) Service class. Demo01 uses just the most basic of these features. In Demo01, the actions that the Service takes for each endpoint are defined in the AppHost.cs file, in a class there called BaseServices and the two methods therein. One method signature indicates the method should be called for a POST to the /Initialization Route, the other method's signature indicates it should be called for a POST on the /PostData Route. These methods signatures specify the DTO classes for their respective Request and Response. TargetFramework For Demo04, the TargetFramework for the ConsoleApp.exe program is the full .Net, Version 4.7.1 in this case. How to make ServiceStack deliver the Blazor app You will need to start with version 5.5 or higher, because ServiceStack developers added some allowed file types to this version to make it work better. The following discussion applies to the code found in AppHost.cs . Allow the delivery of .json files Blazor requires the static file server to deliver a file named blazor.boot.json from the _frameworks subfolder. By default, delivery of .json files are not allowed. In the AppHost.cs file, this line instructs SS to allow the .json suffix. this.Config.AllowFileExtensions.Add(\"json\"); Change the default redirect path Blazor routing requires that when the static file server sees a request made to a URL that does not match a known route, that the server return the contents of index.html. In the AppHost.cs file, this line instructs SS to do that. this.Config.DefaultRedirectPath = \"/index.html\"; Map a virtual path to the location of the files to serve Being able to tell the ConsoleApp where the static files are located is a key requirement.You could use an absolute location, but that would not be very portable. Using a path relative to the location of the executing assembly is more portable. But how to specify that? The answer typically depends on the lifecycle stage of the application. In production, staging, and QA stages, there will be an 'AsInstalled' architecture, and the relationship of the static files to the production .exe will be known. In development under VS, the relationship of the location of static files to the location of the exe being developed, is a bit complicated. A more sophisticated example will use SS AppSettings to create a Configuration setting value that can be controlled by a settings file. But this example will simply use a string constant. In the AppHost.cs file, this line, the var physicalRootPath , specifies the relative location of the ConsoleApp's .exe file to the Blazor app's static files. var physicalRootPath = \"../../../../GUI/bin/Debug/netstandard2.0/Publish/GUI/dist\"; Details on the physicalRootPath value. The value of physicalRootPath shown here is specific to the way VS uses MSBuild, and to the way the GUI's Publish action uses the DebugFolderProfile . GUI project Publish action Under the GUI project's Properties subfolder is the file DebugFolderProfile.pubxml . This file has the property <publishUrl> which controls the location to which the GUI project is published. The Publish action creates a subfolder path <ProjectName>\\dist under the location specified in the <publishUrl>. I wanted it to be easy to delete the published GUI files during development, so I decided to put the Publish location underneath the GUI project's <OutputDir>. Since the <publishUrl> is relative to the <ProjectDir>, I hardcoded the path I wanted (<OutputDir> for Debug and netstandard2.0), making it bin\\Debug\\netstandard2.0\\Publish . The complete path of the published GUI will be bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . After you have done a Publish of the GUI project, use a file explorer to verify the contents of the <GUIProjectDir>\\bin\\Debug\\netstandard2.0\\Publish\\GUI\\dist . You will find the static files that make up the Blazor app, including the wwwroot static content and the multitude of DLLs. ConsoleApp's .EXE's location after build By default VS puts the compile/link artifacts of the ConsoleApp under it's project's MSBuild <OutputDir>, which defaults to the ./bin/<Config>/<framework> subfolder relative to the <ProjectDir>. Under VS debugging of the ConsoleApp, VS starts the .exe in that same <OutputDir>. Relative location of the GUI's static content to ConsoleApp's .exe location So to map from the ConsoleApp's .exe startup directory to the GUI's static content files, the physicalRootPath value consist of: The four ../../.././ patterns maps to the MSBuild <SolutionDir> top-level folder, just above each <ProjectDir>. The <SolutionDir> is the root folder common to both the ConsoleApp project's subfolder tree and the GUI project's subfolder tree. From that common folder, the GUI app's static files are down the path <ProjectDir> (GUI), then the location specified in the DebugFolderProfile.pubxml, ( bin/<Config>/<Framework>/Publish ) and then /GUI/dist as created by the Publish operation. Putting it all together, the ConsoleApp knows where the GUI app's static files are by going up the ConsoleApp project's directory tree to the <SolutionDir>, then down the path to the GUI project's $<ProjectDir> and then down into the bin/<Config>/<Framework>/Publish/ specified by <publishUrl> in DebugFolderProfile.pubxml , then down to the subfolder GUI/dist created by the Publish operation. Again to reiterate, the solution above is very specific to the way VS and MSBuild works, and that specific convoluted physicalRootPath is specific to the way the example project structure was organized. In production or other scenarios, the var physicalRootPath would have a different value.. Details on the virtualRootPath In the first example, the GUI uses an empty virtual path root. In the AppHost.cs file, this line, the var virtualRootPath , specifies the virtual path to the GUI Blazor app's static files. Using an empty path for the virtual path means, for this example, that Index.html is found at ( http://localhost:21200/Index.html ). var virtualRootPath = \"\"; Later examples (hopefully) will show that non-empty values will let SS support multiple Blazor GUIs side-by-side, by aligning different virtualRootPath values with different physicalRootPath values, and modifying each Blazor GUI project's base URL routing slightly. Map it In the ConsoleApp's AppHost.cs Configure method, the following line tells SS to add a new location from which to serve static files that do not match a known SS route. this.AddVirtualFileSources.Add(new FileSystemMapping(virtualRootPath, physicalRootPath)); It appears wrapped in a try-catch block, to catch an exception if the physicalRootPath does not exists. Add CORS support to SS Blazor apps require that Cross Browser Scripting Requests be allowed. SS makes it very easy to support CORS, by including the following lines in the ConsoleApp's AppHost.cs Configure method: Plugins.Add(new CorsFeature( allowedMethods: \"GET, POST, PUT, DELETE, OPTIONS\", allowedOrigins: \"*\", allowCredentials: true, allowedHeaders: \"content-type, Authorization, Accept\")); This is all that's required for SS to serve a Blazor application!"
  },
  "Demos/Demo04/ReadMe.html": {
    "href": "Demos/Demo04/ReadMe.html",
    "title": "Blazor With ServiceStack Demonstrations Demo04 ReadMe (at the common Demo04 Solution subfolder level) | Blazor Examples with ServiceStack",
    "keywords": "Blazor With ServiceStack Demonstrations Demo04 ReadMe (at the common Demo04 Solution subfolder level) If you are viewing this ReadMe.md in GitHub, here is this same ReadMe on the documentation site This is the specific documentation for Demo04, Blazor GUI SS clients . Introduction This documents the types, pages, and services used by the this demonstration program CommonDTOs Blazor GUI ConsoleApp"
  },
  "Demos/Demo03/ConsoleApp/Documentation/Details.html": {
    "href": "Demos/Demo03/ConsoleApp/Documentation/Details.html",
    "title": "The ServiceStack (SS) ConsoleApp.exe Project/program | Blazor Examples with ServiceStack",
    "keywords": "The ServiceStack (SS) ConsoleApp.exe Project/program #Details Demo03 A simple Console program the implements the ServiceStack console host for two endpoints, plus the sauce needed to make ServiceStack deliver the static files that make up the GUI. This Demo03 makes use of almost the same code base as Demo01, please see Demo01 ConosoleApp Detailed Documentation"
  },
  "Demos/Demo05/GUI/ReadMe.html": {
    "href": "Demos/Demo05/GUI/ReadMe.html",
    "title": "ReadMe for Demo05 GUI | Blazor Examples with ServiceStack",
    "keywords": "ReadMe for Demo05 GUI Documentation for the GUI used in Demo05 can be found here: Demo05 GUI Documentation"
  },
  "Demos/Demo05/Documentation/Overview.html": {
    "href": "Demos/Demo05/Documentation/Overview.html",
    "title": "Overview of Demo05 | Blazor Examples with ServiceStack",
    "keywords": "Overview of Demo05 The purpose of Demo05 is to show the near minimal code needed to incorproate the TELERIK Blazor Components library. It continues to use ServiceStack to deliver the Blazor GUI, and provide two simple REST endpoints that can communicate with the Blazor GUI. ConsoleApp The ConsoleApp program creates an instance of a ServiceStack AppSelfHostBase , initializes it, and starts it listening. The ConsoleApp responds on two specific URLs (the routes), and responds with the index.html when any unknown route is sent. When an request comes for index.html, the page instructs the browser to make many more calls to the ConsoleApp, to fetch the .DLL files, and resource files, needed to render the GUI. The Blazor GUI The GUI is comprised of a home page and a second page with an input field, a button, and a place to show the results of an API call. The home page is index.html, and contains instructions on what to download from the ConsoleApp. The home page and the second page reference the TELERIK assembly for Blazor components. The CommonDTOs The CommonDTOs define objects that contain the data fields that will be transmitted between the GUI and the ConsoleApp."
  },
  "Demos/Demo04/GUI/ReadMe.html": {
    "href": "Demos/Demo04/GUI/ReadMe.html",
    "title": "ReadMe for Demo04 GUI | Blazor Examples with ServiceStack",
    "keywords": "ReadMe for Demo04 GUI Documentation for the GUI used in Demo04 can be found here: Demo04 GUI Documentation"
  },
  "Demos/Demo03/CommonDTOs/Documentation/Details.html": {
    "href": "Demos/Demo03/CommonDTOs/Documentation/Details.html",
    "title": "Common Data Transfer Objects (DTOs) Project/Assembly | Blazor Examples with ServiceStack",
    "keywords": "Common Data Transfer Objects (DTOs) Project/Assembly Demo03 (and SS-served Blazor apps in general) uses a separate project to create a separate assembly that holds just the definitions of the DTOs. This project is referenced by both the Blazor GUI project and the ConsoleHost project. It ensure that both projects have the same definition of the data being transferred between them. The CommonDTOs project has just one .cs file in it, CommonDTOs.cs, with all of the DTO class definition in that file. DTOs for the /Initialization Route Both the request and response DTOs for /Initialization are empty classes. There is no data transferred in the /Initialization request or in its response, making this the simplest kind of request/response pair. DTOs for the /PostData Route Both the request and response DTOs for /PostData have a single property, of type string , which I've chosen to call StringDataObject . Both the request and the response will carry a payload consisting of just this one value. TargetFrameworks For Demo03, the CommonDTOs assembly will need to link to both the ConsoleApp.exe and with the Blazor GUI assemblies. So the CommonDTOs project specifies a <TargetFrameworks> of both net471 and netstandard2.0. Note the plural form of <TargetFrameworks> used here. This produces two copies of the assembly. The other two projects each reference the CommonDTOs project, and each picks up their corresponding framework-specific assembly from this project's framework-specific <OutputDir> ."
  },
  "SolutionDocumentation/ContributingGuidelines.html": {
    "href": "SolutionDocumentation/ContributingGuidelines.html",
    "title": "Contributing Guidelines | Blazor Examples with ServiceStack",
    "keywords": "Contributing Guidelines"
  },
  "Demos/Demo03/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo03/GUI/bin/Debug/netstandard2.0/Publish/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo02/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo02/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "SolutionDocumentation/Organization.html": {
    "href": "SolutionDocumentation/Organization.html",
    "title": "Overview of the Organization Code and Documentation | Blazor Examples with ServiceStack",
    "keywords": "Overview of the Organization Code and Documentation If you are viewing this Organization.md in GitHub, here is this same Organization on the documentation site At the solution level, almost everything is found in three solution folders that map to three filesystem subfolders. Solution Documentation contains documents that discuss the demonstrations as a whole Demos contains the individual DemoXX subfolders, and a Documentation folder that discuss aspects common to all Demos* AutoDoc subfolder contains resources used by docFx in creating the static documentation web site. Also at the solution level is a solution folder called Solution Items , which contains the Directory.Build.props file, the top-level ReadMe.md file and three top-level files docfx.json , index.md and toc.yml which are used in creating the static documentation site. After the documentation site is created, a log.txt file is added in the Solution Items, but not to the Git repository, because the .gitignore file specifically notes this file to be ignored. The static documentation site is part of the repository, found in the subfolder /docs (note that case is significant, use all lower-case letters). The contents of this subfolder is generated by DocFx. Instructions for generating the documentation site can be found under the SolutionDocumentation in the file Building the Documentation Contained in the SolutionDocumentation subfolder are individual documentation files. They are listed in the toc.yml file found in that subfolder. Contained in the AutoDoc subfolder are found DocFx template customizations, images subfolder and svg subfolder for image and svg files used by the documentation. Contained in the Demo subfolder is a ReadMe.md file and a toc.yml file. The ReadMe.md file here contains most of the documentation that describes what every DemoXX demonstration is intended to teach. Below the Demo subfolder are individual DemoXX solution folders and filesystem subfolders. These hold the code for each demonstration, along with documentation specific to each DemoXX. In each DemoXX subfolder are subfolders for CommonDTOs , for ConsoleApp , and for GUI The CommonDTOs project define the classes used to transfer data between the GUI and the ConsoleApp . The ConsoleApp project defines the .exe program that serves the files needed by the Blazor GUI to the browser, and provides REST endpoints for the GUI to interact with. The GUI project defines the Blazor app."
  },
  "Demos/Demo05/GUI/wwwroot/css/open-iconic/README.html": {
    "href": "Demos/Demo05/GUI/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo04/GUI/wwwroot/css/open-iconic/README.html": {
    "href": "Demos/Demo04/GUI/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo03/GUI/wwwroot/css/open-iconic/README.html": {
    "href": "Demos/Demo03/GUI/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataReqDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataReqDTO.html",
    "title": "Class ComplexDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataReqDTO Inheritance System.Object ComplexDataReqDTO Implements ServiceStack.IReturn < ComplexDataRspDTO > ServiceStack.IReturn Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataReqDTO : object, IReturn<ComplexDataRspDTO>, IReturn Constructors ComplexDataReqDTO() Declaration public ComplexDataReqDTO() ComplexDataReqDTO(ComplexData) Declaration public ComplexDataReqDTO(ComplexData complexData) Parameters Type Name Description ComplexData complexData Properties ComplexData Declaration public ComplexData ComplexData { get; set; } Property Value Type Description ComplexData Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/net471/ConsoleApp.AppHost.html": {
    "href": "ApiDocumentation/net471/ConsoleApp.AppHost.html",
    "title": "Class AppHost | Blazor Examples with ServiceStack",
    "keywords": "Class AppHost Inheritance System.Object ServiceStack.ServiceStackHost ServiceStack.Host.HttpListener.HttpListenerBase ServiceStack.AppHostHttpListenerBase ServiceStack.AppHostHttpListenerPoolBase ServiceStack.AppSelfHostBase AppHost Implements ServiceStack.IAppHost ServiceStack.Configuration.IResolver Funq.IFunqlet Funq.IHasContainer System.IDisposable Inherited Members ServiceStack.AppHostHttpListenerPoolBase.Dispose(System.Boolean) ServiceStack.AppHostHttpListenerPoolBase.Listen(System.Object) ServiceStack.AppHostHttpListenerBase.ThreadsPerProcessor ServiceStack.AppHostHttpListenerBase.CalculatePoolSize() ServiceStack.AppHostHttpListenerBase.ProcessRequestAsync(System.Net.HttpListenerContext) ServiceStack.AppHostHttpListenerBase.OnConfigLoad() ServiceStack.AppHostHttpListenerBase.HandlerPath ServiceStack.Host.HttpListener.HttpListenerBase.Listener ServiceStack.Host.HttpListener.HttpListenerBase.IsStarted ServiceStack.Host.HttpListener.HttpListenerBase.registeredReservedUrl ServiceStack.Host.HttpListener.HttpListenerBase.OnAfterInit() ServiceStack.Host.HttpListener.HttpListenerBase.SetAppDomainData() ServiceStack.Host.HttpListener.HttpListenerBase.Start(System.String) ServiceStack.Host.HttpListener.HttpListenerBase.Start(System.Collections.Generic.IEnumerable<System.String>) ServiceStack.Host.HttpListener.HttpListenerBase.CreateRequest(System.Net.HttpListenerContext, System.String) ServiceStack.Host.HttpListener.HttpListenerBase.Start(System.String, System.Threading.WaitCallback) ServiceStack.Host.HttpListener.HttpListenerBase.Start(System.Collections.Generic.IEnumerable<System.String>, System.Threading.WaitCallback) ServiceStack.Host.HttpListener.HttpListenerBase.CreateHttpListener() ServiceStack.Host.HttpListener.HttpListenerBase.ProcessRequestContext(System.Net.HttpListenerContext) ServiceStack.Host.HttpListener.HttpListenerBase.HandleError(System.Exception, System.Net.HttpListenerContext) ServiceStack.Host.HttpListener.HttpListenerBase.WriteUnhandledErrorResponse(ServiceStack.Web.IRequest, System.Exception) ServiceStack.Host.HttpListener.HttpListenerBase.OnBeginRequest(System.Net.HttpListenerContext) ServiceStack.Host.HttpListener.HttpListenerBase.AddUrlReservationToAcl(System.String) ServiceStack.Host.HttpListener.HttpListenerBase.RemoveUrlReservationFromAcl(System.String) ServiceStack.Host.HttpListener.HttpListenerBase.BeforeRequest ServiceStack.ServiceStackHost.RestPaths ServiceStack.ServiceStackHost.ExportSoapOperationTypes(System.Collections.Generic.List<System.Type>) ServiceStack.ServiceStackHost.ExportSoapType(System.Type) ServiceStack.ServiceStackHost.WriteSoapMessage(ServiceStack.Web.IRequest, System.ServiceModel.Channels.Message, System.IO.Stream) ServiceStack.ServiceStackHost.IsReady() ServiceStack.ServiceStackHost.CreateServiceController(System.Reflection.Assembly[]) ServiceStack.ServiceStackHost.SetConfig(ServiceStack.HostConfig) ServiceStack.ServiceStackHost.Init() ServiceStack.ServiceStackHost.RegisterLicenseKey(System.String) ServiceStack.ServiceStackHost.PopulateArrayFilters() ServiceStack.ServiceStackHost.GetWebRootPath() ServiceStack.ServiceStackHost.GetVirtualFileSources() ServiceStack.ServiceStackHost.OnPreExecuteServiceFilter(ServiceStack.IService, System.Object, ServiceStack.Web.IRequest, ServiceStack.Web.IResponse) ServiceStack.ServiceStackHost.OnPostExecuteServiceFilter(ServiceStack.IService, System.Object, ServiceStack.Web.IRequest, ServiceStack.Web.IResponse) ServiceStack.ServiceStackHost.OnServiceException(ServiceStack.Web.IRequest, System.Object, System.Exception) ServiceStack.ServiceStackHost.OnUncaughtException(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.String, System.Exception) ServiceStack.ServiceStackHost.HandleUncaughtException(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.String, System.Exception) ServiceStack.ServiceStackHost.HandleShortCircuitedErrors(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.OnStartupException(System.Exception) ServiceStack.ServiceStackHost.OnAfterConfigChanged() ServiceStack.ServiceStackHost.OnBeforeInit() ServiceStack.ServiceStackHost.Release(System.Object) ServiceStack.ServiceStackHost.OnEndRequest(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.Register<T>(T) ServiceStack.ServiceStackHost.RegisterAs<T, TAs>() ServiceStack.ServiceStackHost.TryResolve<T>() ServiceStack.ServiceStackHost.Resolve<T>() ServiceStack.ServiceStackHost.GetPlugin<T>() ServiceStack.ServiceStackHost.HasPlugin<T>() ServiceStack.ServiceStackHost.CreateServiceRunner<TRequest>(ServiceStack.Host.ActionContext) ServiceStack.ServiceStackHost.ResolveLocalizedString(System.String, ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.ResolveAbsoluteUrl(System.String, ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.UseHttps(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetBaseUrl(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.ResolvePhysicalPath(System.String, ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.LoadPlugin(ServiceStack.IPlugin[]) ServiceStack.ServiceStackHost.ExecuteService(System.Object) ServiceStack.ServiceStackHost.ExecuteService(System.Object, ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.ExecuteServiceAsync(System.Object, ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.ExecuteService(System.Object, ServiceStack.RequestAttributes) ServiceStack.ServiceStackHost.ExecuteMessage(ServiceStack.Messaging.IMessage) ServiceStack.ServiceStackHost.ExecuteMessage(ServiceStack.Messaging.IMessage, ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.RegisterService(System.Type, System.String[]) ServiceStack.ServiceStackHost.RegisterServicesInAssembly(System.Reflection.Assembly) ServiceStack.ServiceStackHost.GetRouteAttributes(System.Type) ServiceStack.ServiceStackHost.GenerateWsdl(ServiceStack.Metadata.WsdlTemplateBase) ServiceStack.ServiceStackHost.RegisterTypedRequestFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T>) ServiceStack.ServiceStackHost.RegisterTypedRequestFilter<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilter<T>>) ServiceStack.ServiceStackHost.RegisterTypedResponseFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T>) ServiceStack.ServiceStackHost.RegisterTypedResponseFilter<T>(System.Func<Funq.Container, ServiceStack.Host.ITypedFilter<T>>) ServiceStack.ServiceStackHost.RegisterTypedMessageRequestFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T>) ServiceStack.ServiceStackHost.RegisterTypedMessageResponseFilter<T>(System.Action<ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, T>) ServiceStack.ServiceStackHost.MapProjectPath(System.String) ServiceStack.ServiceStackHost.ResolvePathInfo(ServiceStack.Web.IRequest, System.String) ServiceStack.ServiceStackHost.NormalizePathInfo(System.String, System.String) ServiceStack.ServiceStackHost.ReturnRedirectHandler(ServiceStack.Web.IHttpRequest) ServiceStack.ServiceStackHost.ReturnRequestInfoHandler(ServiceStack.Web.IHttpRequest) ServiceStack.ServiceStackHost.Dispose() ServiceStack.ServiceStackHost.ApplyRequestConvertersAsync(ServiceStack.Web.IRequest, System.Object) ServiceStack.ServiceStackHost.ApplyResponseConvertersAsync(ServiceStack.Web.IRequest, System.Object) ServiceStack.ServiceStackHost.ApplyCustomHandlerRequestFilters(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse) ServiceStack.ServiceStackHost.ApplyPreAuthenticateFilters(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse) ServiceStack.ServiceStackHost.ApplyPreRequestFilters(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse) ServiceStack.ServiceStackHost.ApplyRequestFilters(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.ApplyRequestFiltersAsync(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.ApplyRequestFiltersSingleAsync(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.ApplyResponseFilters(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.ApplyResponseFiltersAsync(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.ApplyResponseFiltersSingleAsync(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.ApplyMessageRequestFilters(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.ApplyMessageResponseFilters(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.ExecTypedFilters(System.Collections.Generic.Dictionary<System.Type, ServiceStack.Host.ITypedFilter>, ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Object) ServiceStack.ServiceStackHost.GetDefaultSessionExpiry(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.HasFeature(ServiceStack.Feature) ServiceStack.ServiceStackHost.AssertFeatures(ServiceStack.Feature) ServiceStack.ServiceStackHost.AssertContentType(System.String) ServiceStack.ServiceStackHost.HasAccessToMetadata(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse) ServiceStack.ServiceStackHost.HandleErrorResponse(ServiceStack.Web.IRequest, ServiceStack.Web.IResponse, System.Net.HttpStatusCode, System.String) ServiceStack.ServiceStackHost.GetCustomErrorHandler(System.Int32) ServiceStack.ServiceStackHost.GetCustomErrorHandler(System.Net.HttpStatusCode) ServiceStack.ServiceStackHost.GetNotFoundHandler() ServiceStack.ServiceStackHost.GetCustomErrorHttpHandler(System.Net.HttpStatusCode) ServiceStack.ServiceStackHost.HasValidAuthSecret(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.ResolveResponseException(System.Exception) ServiceStack.ServiceStackHost.OnExceptionTypeFilter(System.Exception, ServiceStack.ResponseStatus) ServiceStack.ServiceStackHost.OnLogError(System.Type, System.String, System.Exception) ServiceStack.ServiceStackHost.OnSaveSession(ServiceStack.Web.IRequest, ServiceStack.Auth.IAuthSession, System.Nullable<System.TimeSpan>) ServiceStack.ServiceStackHost.OnSessionFilter(ServiceStack.Auth.IAuthSession, System.String) ServiceStack.ServiceStackHost.OnSessionFilter(ServiceStack.Web.IRequest, ServiceStack.Auth.IAuthSession, System.String) ServiceStack.ServiceStackHost.HttpCookieFilter(System.Web.HttpCookie) ServiceStack.ServiceStackHost.SetCookieFilter(ServiceStack.Web.IRequest, System.Net.Cookie) ServiceStack.ServiceStackHost.AllowSetCookie(ServiceStack.Web.IRequest, System.String) ServiceStack.ServiceStackHost.TryGetCurrentRequest() ServiceStack.ServiceStackHost.OnAfterExecute(ServiceStack.Web.IRequest, System.Object, System.Object) ServiceStack.ServiceStackHost.GetTypesConfigForMetadata(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetDbConnection(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetRedisClient(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetCacheClient(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetMemoryCacheClient(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetMessageProducer(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetServiceGateway() ServiceStack.ServiceStackHost.GetServiceGateway(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetAuthRepository(ServiceStack.Web.IRequest) ServiceStack.ServiceStackHost.GetCookies(ServiceStack.Web.IHttpResponse) ServiceStack.ServiceStackHost.ShouldCompressFile(ServiceStack.IO.IVirtualFile) ServiceStack.ServiceStackHost.GetRuntimeConfig<T>(ServiceStack.Web.IRequest, System.String, T) ServiceStack.ServiceStackHost.PublishMessage<T>(ServiceStack.Messaging.IMessageProducer, T) ServiceStack.ServiceStackHost.WriteAutoHtmlResponseAsync(ServiceStack.Web.IRequest, System.Object, System.String, System.IO.Stream) ServiceStack.ServiceStackHost.Instance ServiceStack.ServiceStackHost.StartedAt ServiceStack.ServiceStackHost.AfterInitAt ServiceStack.ServiceStackHost.ReadyAt ServiceStack.ServiceStackHost.TestMode ServiceStack.ServiceStackHost.ServiceAssemblies ServiceStack.ServiceStackHost.HasStarted ServiceStack.ServiceStackHost.ServiceName ServiceStack.ServiceStackHost.AppSettings ServiceStack.ServiceStackHost.Metadata ServiceStack.ServiceStackHost.ServiceController ServiceStack.ServiceStackHost.ExcludeAutoRegisteringServiceTypes ServiceStack.ServiceStackHost.Container ServiceStack.ServiceStackHost.Routes ServiceStack.ServiceStackHost.RequestBinders ServiceStack.ServiceStackHost.ContentTypes ServiceStack.ServiceStackHost.PreRequestFilters ServiceStack.ServiceStackHost.RequestConverters ServiceStack.ServiceStackHost.ResponseConverters ServiceStack.ServiceStackHost.GlobalRequestFilters ServiceStack.ServiceStackHost.GlobalRequestFiltersAsync ServiceStack.ServiceStackHost.GlobalTypedRequestFilters ServiceStack.ServiceStackHost.GlobalResponseFilters ServiceStack.ServiceStackHost.GlobalResponseFiltersAsync ServiceStack.ServiceStackHost.GlobalTypedResponseFilters ServiceStack.ServiceStackHost.GlobalMessageRequestFilters ServiceStack.ServiceStackHost.GlobalMessageRequestFiltersAsync ServiceStack.ServiceStackHost.GlobalTypedMessageRequestFilters ServiceStack.ServiceStackHost.GlobalMessageResponseFilters ServiceStack.ServiceStackHost.GlobalMessageResponseFiltersAsync ServiceStack.ServiceStackHost.GlobalTypedMessageResponseFilters ServiceStack.ServiceStackHost.ViewEngines ServiceStack.ServiceStackHost.ServiceExceptionHandlers ServiceStack.ServiceStackHost.ServiceExceptionHandlersAsync ServiceStack.ServiceStackHost.UncaughtExceptionHandlers ServiceStack.ServiceStackHost.UncaughtExceptionHandlersAsync ServiceStack.ServiceStackHost.BeforeConfigure ServiceStack.ServiceStackHost.AfterConfigure ServiceStack.ServiceStackHost.AfterInitCallbacks ServiceStack.ServiceStackHost.OnDisposeCallbacks ServiceStack.ServiceStackHost.OnEndRequestCallbacks ServiceStack.ServiceStackHost.RawHttpHandlers ServiceStack.ServiceStackHost.CatchAllHandlers ServiceStack.ServiceStackHost.FallbackHandlers ServiceStack.ServiceStackHost.GlobalHtmlErrorHttpHandler ServiceStack.ServiceStackHost.CustomErrorHttpHandlers ServiceStack.ServiceStackHost.StartUpErrors ServiceStack.ServiceStackHost.AsyncErrors ServiceStack.ServiceStackHost.PluginsLoaded ServiceStack.ServiceStackHost.Plugins ServiceStack.ServiceStackHost.VirtualFiles ServiceStack.ServiceStackHost.VirtualFileSources ServiceStack.ServiceStackHost.RootDirectory ServiceStack.ServiceStackHost.ContentRootDirectory ServiceStack.ServiceStackHost.InsertVirtualFileSources ServiceStack.ServiceStackHost.AddVirtualFileSources ServiceStack.ServiceStackHost.GatewayRequestFilters ServiceStack.ServiceStackHost.GatewayRequestFiltersAsync ServiceStack.ServiceStackHost.GatewayResponseFilters ServiceStack.ServiceStackHost.GatewayResponseFiltersAsync ServiceStack.ServiceStackHost.Config ServiceStack.ServiceStackHost.MetadataPagesConfig System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class AppHost : AppSelfHostBase, IAppHost, IResolver, IFunqlet, IHasContainer, IDisposable Constructors AppHost() Base constructor requires a Name and Assembly where web service implementation is located Declaration public AppHost() Methods Configure(Container) Declaration public override void Configure(Container container) Parameters Type Name Description Funq.Container container Overrides ServiceStack.ServiceStackHost.Configure(Funq.Container) Stop() Declaration public override void Stop() Overrides ServiceStack.Host.HttpListener.HttpListenerBase.Stop() Implements ServiceStack.IAppHost ServiceStack.Configuration.IResolver Funq.IFunqlet Funq.IHasContainer System.IDisposable"
  },
  "Demos/Demo02/ReadMe.html": {
    "href": "Demos/Demo02/ReadMe.html",
    "title": "Demo01 Blazor GUI served by ServiceStack having two REST endpoints | Blazor Examples with ServiceStack",
    "keywords": "Demo01 Blazor GUI served by ServiceStack having two REST endpoints The first example program is the most basic. The Blazor GUI portion consists of two Razor pages, and code that makes two REST calls to ServiceStack, one REST call with no data payload sent or received, and one that sends a string and receives a string. The ServiceStack application portion consist of a Console program for .Net (full framework) which serves the static files for the Blazor application, and handles the two simple REST service endpoints. The CommonDTOs project defines the data payload sent and received between the ConsoleApp and the Blazor GUI. : [Demo01 Overview](Documentation/Overview.html)"
  },
  "Demos/Demo01/GUI/wwwroot/css/open-iconic/README.html": {
    "href": "Demos/Demo01/GUI/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo01/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html": {
    "href": "Demos/Demo01/GUI/obj/Release/netstandard2.0/PubTmp/Out/GUI/dist/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo01/GUI/Documentation/Details.html": {
    "href": "Demos/Demo01/GUI/Documentation/Details.html",
    "title": "GUI QuickStart | Blazor Examples with ServiceStack",
    "keywords": "GUI QuickStart"
  },
  "Demos/Demo01/ConsoleApp/ReadMe.html": {
    "href": "Demos/Demo01/ConsoleApp/ReadMe.html",
    "title": "ReadMe for Demo01 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "ReadMe for Demo01 CommonDTOs Documentation for the ConsoleApp used in Demo01 can be found here: Demo01 ConsoleApp Documentation"
  },
  "Demos/Demo01/CommonDTOs/Documentation/Details.html": {
    "href": "Demos/Demo01/CommonDTOs/Documentation/Details.html",
    "title": "Common Data Transfer Objects (DTOs) Project/Assembly | Blazor Examples with ServiceStack",
    "keywords": "Common Data Transfer Objects (DTOs) Project/Assembly Demo01 (and SS-served Blazor apps in general) uses a separate project to create a separate assembly that holds just the definitions of the DTOs. This project is referenced by both the Blazor GUI project and the ConsoleHost project. It ensure that both projects have the same definition of the data being transferred between them. The CommonDTOs project has just one .cs file in it, CommonDTOs.cs, with all of the DTO class definition in that file. DTOs for the /Initialization Route Both the request and response DTOs for /Initialization are empty classes. There is no data transferred in the /Initialization request or in its response, making this the simplest kind of request/response pair. DTOs for the /PostData Route Both the request and response DTOs for /PostData have a single property, of type string , which I've chosen to call StringDataObject . Both the request and the response will carry a payload consisting of just this one value. TargetFrameworks For Demo01, the CommonDTOs assembly will need to link to both the ConsoleApp.exe and with the Blazor GUI assemblies. So the CommonDTOs project specifies a <TargetFrameworks> of both net471 and netstandard2.0. Note the plural form of <TargetFrameworks> used here. This produces two copies of the assembly. The other two projects each reference the CommonDTOs project, and each picks up their corresponding framework-specific assembly from this project's framework-specific <OutputDir> ."
  },
  "Demos/Demo01/CommonDTOs/ReadMe.html": {
    "href": "Demos/Demo01/CommonDTOs/ReadMe.html",
    "title": "Readme Demo01 CommonDTOs | Blazor Examples with ServiceStack",
    "keywords": "Readme Demo01 CommonDTOs Documentation for the CommonDTOs used in Demo01 can be found here: Demo01 CommonDTOs Documentation"
  },
  "Demos/Demo03/ReadMe.html": {
    "href": "Demos/Demo03/ReadMe.html",
    "title": "Demo03 Blazor GUI using teh SS HttpClient-based JsonHttpClient | Blazor Examples with ServiceStack",
    "keywords": "Demo03 Blazor GUI using teh SS HttpClient-based JsonHttpClient If you are viewing this ReadMe.md in GitHub, here is this same ReadMe on the documentation site The third example program brings in the ServiceStack HttpClient-based JsonHttpClient as the communication library between the GUI and the ConsoleApp"
  },
  "Demos/Demo02/GUI/Documentation/Details.html": {
    "href": "Demos/Demo02/GUI/Documentation/Details.html",
    "title": "GUI QuickStart | Blazor Examples with ServiceStack",
    "keywords": "GUI QuickStart"
  },
  "Demos/Demo05/ReadMe.html": {
    "href": "Demos/Demo05/ReadMe.html",
    "title": "Blazor With ServiceStack Demonstrations Demo05 ReadMe (at the common Demo05 Solution subfolder level) | Blazor Examples with ServiceStack",
    "keywords": "Blazor With ServiceStack Demonstrations Demo05 ReadMe (at the common Demo05 Solution subfolder level) If you are viewing this ReadMe.md in GitHub, here is this same ReadMe on the documentation site This is the specific documentation for Demo04, Blazor GUI having simple Telerik components . Introduction This documents the types, pages, and services used by the this demonstration program CommonDTOs Blazor GUI ConsoleApp"
  },
  "Demos/Demo03/ConsoleApp/ReadMe.html": {
    "href": "Demos/Demo03/ConsoleApp/ReadMe.html",
    "title": "ReadMe for Demo03 ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "ReadMe for Demo03 ConsoleApp Documentation for the ConsoleApp used in Demo03 can be found here: Demo03 ConsoleApp Documentation"
  },
  "Demos/Demo02/GUI/wwwroot/css/open-iconic/README.html": {
    "href": "Demos/Demo02/GUI/wwwroot/css/open-iconic/README.html",
    "title": "Open Iconic v1.1.1 | Blazor Examples with ServiceStack",
    "keywords": "Open Iconic v1.1.1 Open Iconic is the open source sibling of Iconic . It is a hyper-legible collection of 223 icons with a tiny footprint—ready to use with Bootstrap and Foundation. View the collection What's in Open Iconic? 223 icons designed to be legible down to 8 pixels Super-light SVG files - 61.8 for the entire set SVG sprite—the modern replacement for icon fonts Webfont (EOT, OTF, SVG, TTF, WOFF), PNG and WebP formats Webfont stylesheets (including versions for Bootstrap and Foundation) in CSS, LESS, SCSS and Stylus formats PNG and WebP raster images in 8px, 16px, 24px, 32px, 48px and 64px. Getting Started For code samples and everything else you need to get started with Open Iconic, check out our Icons and Reference sections. General Usage Using Open Iconic's SVGs We like SVGs and we think they're the way to display icons on the web. Since Open Iconic are just basic SVGs, we suggest you display them like you would any other image (don't forget the alt attribute). <img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\"> Using Open Iconic's SVG Sprite Open Iconic also comes in a SVG sprite which allows you to display all the icons in the set with a single request. It's like an icon font, without being a hack. Adding an icon from an SVG sprite is a little different than what you're used to, but it's still a piece of cake. Tip: To make your icons easily style able, we suggest adding a general class to the <svg> tag and a unique class name for each different icon in the <use> tag. <svg class=\"icon\"> <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use> </svg> Sizing icons only needs basic CSS. All the icons are in a square format, so just set the <svg> tag with equal width and height dimensions. .icon { width: 16px; height: 16px; } Coloring icons is even easier. All you need to do is set the fill rule on the <use> tag. .icon-account-login { fill: #f00; } To learn more about SVG Sprites, read Chris Coyier's guide . Using Open Iconic's Icon Font... …with Bootstrap You can find our Bootstrap stylesheets in font/css/open-iconic-bootstrap.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\"> <span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …with Foundation You can find our Foundation stylesheets in font/css/open-iconic-foundation.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\"> <span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> …on its own You can find our default stylesheets in font/css/open-iconic.{css, less, scss, styl} <link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\"> <span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span> License Icons All code (including SVG markup) is under the MIT License . Fonts All fonts are under the SIL Licensed ."
  },
  "Demos/Demo05/CommonDTOs/Documentation/Details.html": {
    "href": "Demos/Demo05/CommonDTOs/Documentation/Details.html",
    "title": "Common Data Transfer Objects (DTOs) Project/Assembly | Blazor Examples with ServiceStack",
    "keywords": "Common Data Transfer Objects (DTOs) Project/Assembly Demo05 (and SS-served Blazor apps in general) uses a separate project to create a separate assembly that holds just the definitions of the DTOs. This project is referenced by both the Blazor GUI project and the ConsoleHost project. It ensure that both projects have the same definition of the data being transferred between them. The CommonDTOs project has just one .cs file in it, CommonDTOs.cs, with all of the DTO class definition in that file. DTOs for the /Initialization Route Both the request and response DTOs for /Initialization are empty classes. There is no data transferred in the /Initialization request or in its response, making this the simplest kind of request/response pair. DTOs for the /PostData Route Both the request and response DTOs for /PostData have a single property, of type string , which I've chosen to call StringDataObject . Both the request and the response will carry a payload consisting of just this one value. TargetFrameworks For all demos, the CommonDTOs assembly will need to link to both the ConsoleApp.exe and with the Blazor GUI assemblies. So the CommonDTOs project specifies a <TargetFrameworks> of both net471 and netstandard2.0. Note the plural form of <TargetFrameworks> used here. This produces two copies of the assembly. The other two projects each reference the CommonDTOs project, and each picks up their corresponding framework-specific assembly from this project's framework-specific <OutputDir> ."
  },
  "ApiDocumentation/netcoreapp2.0/ConsoleApp.BaseServices.html": {
    "href": "ApiDocumentation/netcoreapp2.0/ConsoleApp.BaseServices.html",
    "title": "Class BaseServices | Blazor Examples with ServiceStack",
    "keywords": "Class BaseServices Inheritance System.Object BaseServices Namespace : ConsoleApp Assembly : ConsoleApp.dll Syntax public class BaseServices : Service Methods Post(InitializationReqDTO) Declaration public object Post(InitializationReqDTO request) Parameters Type Name Description InitializationReqDTO request Returns Type Description System.Object Post(PostDataReqDTO) Declaration public object Post(PostDataReqDTO request) Parameters Type Name Description PostDataReqDTO request Returns Type Description System.Object"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.ReqComplexDataDictionaryAsStringDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.ReqComplexDataDictionaryAsStringDTO.html",
    "title": "Class ReqComplexDataDictionaryAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ReqComplexDataDictionaryAsStringDTO Inheritance System.Object ReqComplexDataDictionaryAsStringDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ReqComplexDataDictionaryAsStringDTO : IReturn<RspComplexDataDictionaryAsStringDTO> Properties ComplexDataDictionaryAsString Declaration public string ComplexDataDictionaryAsString { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/net471/CommonDTOs.ComplexDataDictionary.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.ComplexDataDictionary.html",
    "title": "Class ComplexDataDictionary | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionary Inheritance System.Object ComplexDataDictionary Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataDictionary Properties ComplexDataDict Declaration public Dictionary<string, ComplexData> ComplexDataDict { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , ComplexData >"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataReqDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataReqDTO.html",
    "title": "Class ComplexDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataReqDTO Inheritance System.Object ComplexDataReqDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataReqDTO : IReturn<ComplexDataRspDTO> Constructors ComplexDataReqDTO() Declaration public ComplexDataReqDTO() ComplexDataReqDTO(ComplexData) Declaration public ComplexDataReqDTO(ComplexData complexData) Parameters Type Name Description ComplexData complexData Properties ComplexData Declaration public ComplexData ComplexData { get; set; } Property Value Type Description ComplexData"
  },
  "ApiDocumentation/net471/CommonDTOs.InitializationReqDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.InitializationReqDTO.html",
    "title": "Class InitializationReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationReqDTO Inheritance System.Object InitializationReqDTO Implements ServiceStack.IReturn < InitializationRspDTO > ServiceStack.IReturn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/Initialization\")] public class InitializationReqDTO : IReturn<InitializationRspDTO>, IReturn Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netcoreapp2.0/ConsoleApp.html": {
    "href": "ApiDocumentation/netcoreapp2.0/ConsoleApp.html",
    "title": "Namespace ConsoleApp | Blazor Examples with ServiceStack",
    "keywords": "Namespace ConsoleApp Classes AppHost BaseServices"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.PostDataRspDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.PostDataRspDTO.html",
    "title": "Class PostDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataRspDTO Inheritance System.Object PostDataRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataRspDTO : object Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.InitializationReqDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.InitializationReqDTO.html",
    "title": "Class InitializationReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationReqDTO Inheritance System.Object InitializationReqDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationReqDTO : IReturn<InitializationRspDTO>"
  },
  "ApiDocumentation/net471/CommonDTOs.ReqComplexDataAsStringDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.ReqComplexDataAsStringDTO.html",
    "title": "Class ReqComplexDataAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ReqComplexDataAsStringDTO Inheritance System.Object ReqComplexDataAsStringDTO Implements ServiceStack.IReturn < RspComplexDataAsStringDTO > ServiceStack.IReturn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/PostComplexDataAsString\")] public class ReqComplexDataAsStringDTO : IReturn<RspComplexDataAsStringDTO>, IReturn Properties ComplexDataAsString Declaration public string ComplexDataAsString { get; set; } Property Value Type Description System.String Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.ReqComplexDataAsStringDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.ReqComplexDataAsStringDTO.html",
    "title": "Class ReqComplexDataAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ReqComplexDataAsStringDTO Inheritance System.Object ReqComplexDataAsStringDTO Implements ServiceStack.IReturn < RspComplexDataAsStringDTO > ServiceStack.IReturn Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ReqComplexDataAsStringDTO : object, IReturn<RspComplexDataAsStringDTO>, IReturn Properties ComplexDataAsString Declaration public string ComplexDataAsString { get; set; } Property Value Type Description System.String Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataDictionaryRspDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataDictionaryRspDTO.html",
    "title": "Class ComplexDataDictionaryRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionaryRspDTO Inheritance System.Object ComplexDataDictionaryRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataDictionaryRspDTO : object Constructors ComplexDataDictionaryRspDTO() Declaration public ComplexDataDictionaryRspDTO() ComplexDataDictionaryRspDTO(ComplexDataDictionary) Declaration public ComplexDataDictionaryRspDTO(ComplexDataDictionary complexDataDictionary) Parameters Type Name Description ComplexDataDictionary complexDataDictionary Properties ComplexDataDictionary Declaration public ComplexDataDictionary ComplexDataDictionary { get; set; } Property Value Type Description ComplexDataDictionary"
  },
  "ApiDocumentation/net471/CommonDTOs.InitializationRspDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.InitializationRspDTO.html",
    "title": "Class InitializationRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationRspDTO Inheritance System.Object InitializationRspDTO Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationRspDTO"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.RspComplexDataDictionaryAsStringDTO.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.RspComplexDataDictionaryAsStringDTO.html",
    "title": "Class RspComplexDataDictionaryAsStringDTO | Blazor Examples with ServiceStack",
    "keywords": "Class RspComplexDataDictionaryAsStringDTO Inheritance System.Object RspComplexDataDictionaryAsStringDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class RspComplexDataDictionaryAsStringDTO : object Properties ComplexDataDictionaryAsString Declaration public string ComplexDataDictionaryAsString { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.InitializationRspDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.InitializationRspDTO.html",
    "title": "Class InitializationRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class InitializationRspDTO Inheritance System.Object InitializationRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class InitializationRspDTO : object"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexData.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexData.html",
    "title": "Class ComplexData | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexData Inheritance System.Object ComplexData Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexData : object Properties DateTimeData Declaration public DateTime DateTimeData { get; set; } Property Value Type Description DateTime DecimalData Declaration public decimal DecimalData { get; set; } Property Value Type Description System.Decimal DoubleData Declaration public double DoubleData { get; set; } Property Value Type Description System.Double IntData Declaration public int IntData { get; set; } Property Value Type Description System.Int32 StringData Declaration public string StringData { get; set; } Property Value Type Description System.String TimeSpanData Declaration public TimeSpan TimeSpanData { get; set; } Property Value Type Description TimeSpan"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataDictionaryReqDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataDictionaryReqDTO.html",
    "title": "Class ComplexDataDictionaryReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionaryReqDTO Inheritance System.Object ComplexDataDictionaryReqDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataDictionaryReqDTO : IReturn<ComplexDataDictionaryRspDTO> Constructors ComplexDataDictionaryReqDTO() Declaration public ComplexDataDictionaryReqDTO() ComplexDataDictionaryReqDTO(ComplexDataDictionary) Declaration public ComplexDataDictionaryReqDTO(ComplexDataDictionary complexDataDictionary) Parameters Type Name Description ComplexDataDictionary complexDataDictionary Properties ComplexDataDictionary Declaration public ComplexDataDictionary ComplexDataDictionary { get; set; } Property Value Type Description ComplexDataDictionary"
  },
  "ApiDocumentation/net471/CommonDTOs.PostDataRspDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.PostDataRspDTO.html",
    "title": "Class PostDataRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataRspDTO Inheritance System.Object PostDataRspDTO Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class PostDataRspDTO Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String"
  },
  "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataDictionaryRspDTO.html": {
    "href": "ApiDocumentation/netcoreapp2.0/CommonDTOs.ComplexDataDictionaryRspDTO.html",
    "title": "Class ComplexDataDictionaryRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionaryRspDTO Inheritance System.Object ComplexDataDictionaryRspDTO Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataDictionaryRspDTO : object Constructors ComplexDataDictionaryRspDTO() Declaration public ComplexDataDictionaryRspDTO() ComplexDataDictionaryRspDTO(ComplexDataDictionary) Declaration public ComplexDataDictionaryRspDTO(ComplexDataDictionary complexDataDictionary) Parameters Type Name Description ComplexDataDictionary complexDataDictionary Properties ComplexDataDictionary Declaration public ComplexDataDictionary ComplexDataDictionary { get; set; } Property Value Type Description ComplexDataDictionary"
  },
  "ApiDocumentation/net471/CommonDTOs.PostDataReqDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.PostDataReqDTO.html",
    "title": "Class PostDataReqDTO | Blazor Examples with ServiceStack",
    "keywords": "Class PostDataReqDTO Inheritance System.Object PostDataReqDTO Implements ServiceStack.IReturn < PostDataRspDTO > ServiceStack.IReturn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax [Route(\"/PostData\")] public class PostDataReqDTO : IReturn<PostDataRspDTO>, IReturn Properties StringDataObject Declaration public string StringDataObject { get; set; } Property Value Type Description System.String Implements ServiceStack.IReturn<T> ServiceStack.IReturn"
  },
  "ApiDocumentation/net471/CommonDTOs.ComplexDataDictionaryRspDTO.html": {
    "href": "ApiDocumentation/net471/CommonDTOs.ComplexDataDictionaryRspDTO.html",
    "title": "Class ComplexDataDictionaryRspDTO | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionaryRspDTO Inheritance System.Object ComplexDataDictionaryRspDTO Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataDictionaryRspDTO Constructors ComplexDataDictionaryRspDTO() Declaration public ComplexDataDictionaryRspDTO() ComplexDataDictionaryRspDTO(ComplexDataDictionary) Declaration public ComplexDataDictionaryRspDTO(ComplexDataDictionary complexDataDictionary) Parameters Type Name Description ComplexDataDictionary complexDataDictionary Properties ComplexDataDictionary Declaration public ComplexDataDictionary ComplexDataDictionary { get; set; } Property Value Type Description ComplexDataDictionary"
  },
  "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataDictionary.html": {
    "href": "ApiDocumentation/netstandard2.0/CommonDTOs.ComplexDataDictionary.html",
    "title": "Class ComplexDataDictionary | Blazor Examples with ServiceStack",
    "keywords": "Class ComplexDataDictionary Inheritance System.Object ComplexDataDictionary Namespace : CommonDTOs Assembly : CommonDTOs.dll Syntax public class ComplexDataDictionary : object Properties ComplexDataDict Declaration public Dictionary<string, ComplexData> ComplexDataDict { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , ComplexData >"
  }
}