@page "/"
@page "/index.html"
@inherits GUI.Pages.IndexCodeBehind
@using  Microsoft.Extensions.Logging

<h1>A Blazor GUI served by ServiceStack Middleware in a .Net Core 3.0 WebHost.</h1>
<p>The server in this demo uses a TargetFramework: Net Core 2.2 and a WebHost: either a Kestrel WebHost or an Integrated IIS InProcess WebHost. The choice is made at the server startup runtime via an environment variable `BlazorDemos_WebHostBuilder`</p>
<h2>Demo's point</h2>
<p>The addition of timers to the GUI, and having the timers interact with the page's state</p>
<h3>GUI changes</h3>
<p>The GUI adds a timer that will increment AnIntegerProperty, a button to start/stop the timer, styles for the TimerControl button, and state triggers for the button and for the timer itself</p>
<h3>Server changes</h3>
<p></p>
<h3>.sccs changes</h3>
<p>Styling for the Buttons, and for AnIntegerProperty's text span</p>
<h2>Visual portion</h2>
<p>The number below is stored in a page-local Property named AnIntegerProperty. The number will increment with each button click. and via a timer. Access to the Property value is controlled by state. The Property value is read from  browser-local storage via the getter. Each time the page is initialized, the initialization logic will check the browser-local storage for the last stored value, and will set the property to that last stored value. Refreshing the page will <strong>NOT</strong> reset the value to 0 if the property is present in the browser-storage, However, if you clear the browser-local storage, then refresh the page, the property will go back to 0. Unless browser-local storage is cleared, the value of `AnIntegerProperty`, when a page is initialized for the first time, will be the value stored in browser-local storage. This means the last value will persist when the application is subsequently loaded, because browser-local storage is persistent.</p>

<p>AnIntegerProperty backed by State: <text id="AnIntegerPropertyTextSpan" style="@AnIntegerPropertyTextSpanStyle">@AnIntegerProperty</text></p>

<p>Both the button's OnClick event and the timer's callback event handler will increment the value of the Property, and  modifies the visual appearance of the Property's style by manipulating the values of the Blazor page-local variables assigned to the class, style, and text attributes of the element.  </p>
<button name="IncrementAnIntegerProperty" id="IncrementAnIntegerProperty"
        class="@IncrementAnIntegerPropertyButtonClass" 
        style="@IncrementAnIntegerPropertyButtonStyle" 
        @onclick="@IncrementAnIntegerPropertyButtonHandlerCurrent">
    @IncrementAnIntegerPropertyButtonText
</button>
<br />
<p>This button stops and starts the timer. timer duration is hardcoded at 2 seconds</p>

<button name="ControlATimer" id="ControlATimer"
        class="@ControlATimerButtonClass" 
        style="@ControlATimerButtonStyle" 
        @onclick="@ControlATimerButtonHandlerCurrent">
    @ControlATimerButtonText
</button>

<br />
<h4>Attribution and Further Reading</h4>
<p>@StringConstants.ThirdPartyLinkCautionMessage</p>
<ol>
    
</ol>
