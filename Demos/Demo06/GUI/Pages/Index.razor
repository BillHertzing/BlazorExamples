@page "/"
@page "/index.html"
@inherits GUI.Pages.IndexCodeBehind
@using  Microsoft.Extensions.Logging

<h1>Demo06 GUI Timer enhancements, Server selectable WebHost enhancements.</h1>
<h4>Demo's point</h4>
<p>The GUI adds a button to start/stop the timer, a CSS animation to represent the timer enabled boolean, and event handlers for the button.</p>
<p>State additions to control how the timer and the new button interact with the page's state</p>
<p>The server adds Environment</p>
<hr/>
<h4>Visual focus</h4>
<button name="IncrementAnIntegerPropertyTimerControlButton" 
        class="@IncrementAnIntegerPropertyTimerControlButtonClass"
        style="@IncrementAnIntegerPropertyTimerControlButtonStyle"
        @onclick="@IncrementAnIntegerPropertyTimerControlButtonOnClickHandler">
    @IncrementAnIntegerPropertyTimerControlButtonText
</button>
<div class=CSSTimer></div>
<img name="IncrementAnIntegerPropertyTimer"
     src="@IncrementAnIntegerPropertyTimerSrc"
     class="@IncrementAnIntegerPropertyTimerClass"
     style="@IncrementAnIntegerPropertyTimerStyle" />
<button name="IncrementAnIntegerPropertyButton"
        class="@S.P.IncrementAnIntegerPropertyButtonClass"
        style="@S.P.IncrementAnIntegerPropertyButtonStyle"
        @onclick="@(async () => await @IncrementAnIntegerPropertyButtonOnClickHandler())">
    @S.P.IncrementAnIntegerPropertyButtonText
</button>
<text name="AnIntegerPropertyTextSpan" style="@S.P.AnIntegerPropertyTextSpanStyle">@AnIntegerProperty</text>
<hr/>
<h4>Explanation</h4>
<p>The value of `AnIntegerProperty` is stored in a page-local Property named AnIntegerProperty. The number will increment with each button click. and via a timer. Access to the Property value is controlled by state. A Timer will increment the Property named AnIntegerProperty. It does this by running the state program in the Timers Expired Acitve event handler</p>
<p>This Property has two different 'mutating' visual styles to indicate which state program is mutating its value. Both the button's OnClick event and the timer's Expired callback event handler will increment the value of the Property, and  modifies the visual appearance of the Property's style by manipulating the values of the Blazor page-local variables assigned to the class, style, and text attributes of the element.</p>
<p>This button stops and starts the timer. timer duration is hardcoded at 2 seconds</p>
<h4>GUI changes</h4>
<h5>SCCS changes</h5>
<p>Styles added in the previous Demo are migrated to the .sccs, which includes styling for the buttons, and for AnIntegerProperty's text span</p>

<p>The GUI adds  a button to start/stop the timer, styles for the TimerControl button, and state triggers for the button </p>
<h4>Server changes</h4>
<p></p>
<h4>build / debug tooling changes</h4>
<p></p>
<hr/>
<h4>Attribution and Further Reading</h4>
<p>@StringConstants.ThirdPartyLinkCautionMessage</p>
<ol>
</ol>
